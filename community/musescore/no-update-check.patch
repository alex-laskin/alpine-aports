--- a/src/framework/update/internal/updatescenario.cpp
+++ b/src/framework/update/internal/updatescenario.cpp
@@ -46,51 +46,8 @@
 muse::async::Promise<Ret> UpdateScenario::checkForUpdate(bool manual)
 {
     return async::make_promise<Ret>([this, manual](auto resolve, auto) {
-        m_checkProgressChannel = std::make_shared<Progress>();
-        m_checkProgressChannel->started().onNotify(this, [this]() {
-            m_checkInProgress = true;
-        });
-
-        if (isCheckInProgress()) {
-            LOGE() << "Check already in progress";
-            const Ret ret = muse::make_ret(Ret::Code::UnknownError);
-            return resolve(ret);
-        }
-
-        m_checkProgressChannel = std::make_shared<Progress>();
-        m_checkProgressChannel->started().onNotify(this, [this]() {
-            m_checkInProgress = true;
-        });
-
-        m_checkProgressChannel->finished().onReceive(this, [this, manual, resolve](const ProgressResult& res) {
-            Ret ret = muse::make_ok();
-            DEFER {
-                m_checkInProgress = false;
-                (void)resolve(ret);
-            };
-
-            const bool noUpdate = res.ret.code() == static_cast<int>(Err::NoUpdate);
-            if (!noUpdate && !res.ret) {
-                LOGE() << "Unable to check for update, error: " << res.ret.toString();
-                ret = muse::make_ret(Ret::Code::UnknownError);
-
-                if (manual) {
-                    showServerErrorMsg();
-                }
-
-                return;
-            }
-
-            if (!manual) {
-                return;
-            }
-
-            ReleaseInfo info = releaseInfoFromValMap(res.val.toMap());
-            noUpdate ? showNoUpdateMsg() : showReleaseInfo(info);
-        });
-
-        Concurrent::run(this, &UpdateScenario::th_checkForUpdate);
-        return muse::async::Promise<Ret>::dummy_result();
+        const Ret ret = muse::make_ret(Ret::Code::UnknownError);
+        return resolve(ret);
     });
 }
 
