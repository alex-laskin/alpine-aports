From d54e5d488b5310795fe1dd63b39b18bf29b70a54 Mon Sep 17 00:00:00 2001
From: Christian Heusel <christian@heusel.eu>
Date: Tue, 14 Oct 2025 15:50:34 +0200
Subject: [PATCH] build: Add compatibility with LLVM 21

This adds LLVM 21 compatibility by adding the relevant code changes
guarded by `#ifdev`-statements for backwards compatibility.

Additionally also add CI checks for this.

Signed-off-by: Christian Heusel <christian@heusel.eu>
---
 .github/workflows/build-steps.yml |  2 +-
 .github/workflows/ci.yml          |  5 ++---
 src/cmake/externalpackages.cmake  |  2 +-
 src/liboslcomp/oslcomp.cpp        | 13 +++++++++++++
 src/liboslexec/llvm_instance.cpp  |  4 ++++
 5 files changed, 21 insertions(+), 5 deletions(-)

diff --git a/.github/workflows/build-steps.yml b/.github/workflows/build-steps.yml
index 9bf099c..2d0b651 100644
--- a/.github/workflows/build-steps.yml
+++ b/.github/workflows/build-steps.yml
@@ -134,7 +134,7 @@ jobs:
           restore-keys: ${{inputs.nametag}}
       - name: Install LLVM and Clang
         if: inputs.llvm_action_ver != ''
-        uses: KyleMayes/install-llvm-action@a7a1a882e2d06ebe05d5bb97c3e1f8c984ae96fc # v2.0.7
+        uses: KyleMayes/install-llvm-action@98e68e10c96dffcb7bfed8b2144541a66b49aa02 # v2.0.8
         with:
           version: ${{ inputs.llvm_action_ver }}
       - name: Dependencies
diff --git a/.github/workflows/ci.yml b/.github/workflows/ci.yml
index 6e5092f..b5aa140 100644
--- a/.github/workflows/ci.yml
+++ b/.github/workflows/ci.yml
@@ -445,7 +445,7 @@ jobs:
             openimageio_ver: main
             pybind11_ver: master
             python_ver: "3.12"
-            llvm_action_ver: "18.1.7"
+            llvm_action_ver: "21.1.3"
             simd: avx2,f16c
             batched: b8_AVX2,b8_AVX512,b16_AVX512
             setenvs: export PUGIXML_VERSION=master
@@ -548,7 +548,7 @@ jobs:
             python_ver: "3.13"
             aclang: 15
             setenvs: export LLVMBREWVER="@19"
-          - desc: MacOS-15-ARM aclang16/C++17/py3.13 llvm19 oiio-main
+          - desc: MacOS-15-ARM aclang16/C++17/py3.13 llvm21 oiio-main
             runner: macos-15
             nametag: macos15-arm-py313
             cc_compiler: clang
@@ -556,7 +556,6 @@ jobs:
             cxx_std: 17
             python_ver: "3.13"
             openimageio_ver: main
-            setenvs: export LLVMBREWVER="@19"
 
 
   windows:
diff --git a/src/cmake/externalpackages.cmake b/src/cmake/externalpackages.cmake
index 819a6cf..8fff2f3 100644
--- a/src/cmake/externalpackages.cmake
+++ b/src/cmake/externalpackages.cmake
@@ -58,7 +58,7 @@ checked_find_package (pugixml REQUIRED
 # LLVM library setup
 checked_find_package (LLVM REQUIRED
                       VERSION_MIN 11.0
-                      VERSION_MAX 20.9
+                      VERSION_MAX 21.9
                       PRINT LLVM_SYSTEM_LIBRARIES CLANG_LIBRARIES
                             LLVM_SHARED_MODE)
 # ensure include directory is added (in case of non-standard locations
diff --git a/src/liboslcomp/oslcomp.cpp b/src/liboslcomp/oslcomp.cpp
index 14bee9a..027f47d 100644
--- a/src/liboslcomp/oslcomp.cpp
+++ b/src/liboslcomp/oslcomp.cpp
@@ -171,19 +171,32 @@ OSLCompilerImpl::preprocess_buffer(const std::string& buffer,
     llvm::raw_string_ostream errstream(preproc_errors);
     clang::DiagnosticOptions* diagOptions = new clang::DiagnosticOptions();
     clang::TextDiagnosticPrinter* diagPrinter
+#if OSL_LLVM_VERSION < 210
         = new clang::TextDiagnosticPrinter(errstream, diagOptions);
+#else
+        = new clang::TextDiagnosticPrinter(errstream, *diagOptions);
+#endif
     llvm::IntrusiveRefCntPtr<clang::DiagnosticIDs> diagIDs(
         new clang::DiagnosticIDs);
     clang::DiagnosticsEngine* diagEngine
+#if OSL_LLVM_VERSION < 210
         = new clang::DiagnosticsEngine(diagIDs, diagOptions, diagPrinter);
+#else
+        = new clang::DiagnosticsEngine(diagIDs, *diagOptions, diagPrinter);
+#endif
     inst.setDiagnostics(diagEngine);
 
     const std::shared_ptr<clang::TargetOptions> targetopts
         = std::make_shared<clang::TargetOptions>(inst.getTargetOpts());
     targetopts->Triple = llvm::sys::getDefaultTargetTriple();
     clang::TargetInfo* target
+#if OSL_LLVM_VERSION < 210
         = clang::TargetInfo::CreateTargetInfo(inst.getDiagnostics(),
                                               targetopts);
+#else
+        = clang::TargetInfo::CreateTargetInfo(inst.getDiagnostics(),
+                                              *targetopts);
+#endif
 
     inst.setTarget(target);
 
diff --git a/src/liboslexec/llvm_instance.cpp b/src/liboslexec/llvm_instance.cpp
index 974f95b..b5526f9 100644
--- a/src/liboslexec/llvm_instance.cpp
+++ b/src/liboslexec/llvm_instance.cpp
@@ -2225,7 +2225,11 @@ BackendLLVM::run()
             // The triple is empty with recent versions of LLVM (e.g., 15) for reasons that aren't
             // clear. So we must set them to the expected values.
             // See: https://llvm.org/docs/NVPTXUsage.html
+#    if OSL_LLVM_VERSION < 210
             ll.module()->setTargetTriple("nvptx64-nvidia-cuda");
+#    else
+            ll.module()->setTargetTriple(llvm::Triple("nvptx64-nvidia-cuda"));
+#    endif
             ll.module()->setDataLayout(
                 "e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-i128:128:128-f32:32:32-f64:64:64-v16:16:16-v32:32:32-v64:64:64-v128:128:128-n16:32:64");
 
-- 
2.51.0

