Patch-Source: https://github.com/statsmodels/statsmodels/pull/9631
---
From 54eca35427cf06c8a85cd24af9f49ac60c075170 Mon Sep 17 00:00:00 2001
From: Kevin Sheppard <bashtage@users.noreply.github.com>
Date: Fri, 12 Sep 2025 18:21:51 +0100
Subject: [PATCH 1/2] MAINT: Remove dependence on npymath

Move small exposure to inline functions
---
 setup.py                        |  2 +-
 statsmodels/src/_complex_shim.h | 24 ++++++++++++++++++++++++
 statsmodels/src/math.pxd        | 21 ++++++++++++---------
 3 files changed, 37 insertions(+), 10 deletions(-)
 create mode 100644 statsmodels/src/_complex_shim.h

diff --git a/setup.py b/setup.py
index 31788d729a5..74a92b59475 100644
--- a/setup.py
+++ b/setup.py
@@ -263,7 +263,7 @@ def process_tempita(source_name):
 NUMPY_MATH_LIBS = {
     "include_dirs": [np.get_include()],
     "library_dirs": [os.path.join(np.get_include(), "..", "lib")],
-    "libraries": ["npymath"],
+    "libraries": [],
 }
 
 
diff --git a/statsmodels/src/_complex_shim.h b/statsmodels/src/_complex_shim.h
new file mode 100644
index 00000000000..e48b45fc4bb
--- /dev/null
+++ b/statsmodels/src/_complex_shim.h
@@ -0,0 +1,24 @@
+#include <stdio.h>
+#include <complex.h>
+
+#ifdef _MSC_VER // using Microsoft's implementation:
+
+typedef _Dcomplex double_complex;
+
+#else // using standard C:
+
+typedef double complex double_complex;
+
+#endif
+
+inline double sm_cabs(double_complex z){
+   return cabs(z);
+}
+
+inline double_complex sm_clog(double_complex z){
+   return clog(z);
+}
+
+inline double_complex sm_cexp(double_complex z){
+   return cexp(z);
+}
diff --git a/statsmodels/src/math.pxd b/statsmodels/src/math.pxd
index 6812e2f0197..23a3612428f 100644
--- a/statsmodels/src/math.pxd
+++ b/statsmodels/src/math.pxd
@@ -4,29 +4,32 @@ from libc.math cimport log as dlog, abs as dabs, exp as dexp
 cimport numpy as np
 from libc.string cimport memcpy
 
+cdef extern from "_complex_shim.h":
+    ctypedef double double_complex
+    double sm_cabs(double_complex z) nogil
+    double_complex sm_clog(double_complex z) nogil
+    double_complex sm_cexp(double_complex z) nogil
+
 cdef extern from "numpy/npy_math.h":
     np.float64_t NPY_PI
-    np.float64_t npy_cabs(np.npy_cdouble z) noexcept nogil
-    np.npy_cdouble npy_clog(np.npy_cdouble z) noexcept nogil
-    np.npy_cdouble npy_cexp(np.npy_cdouble z) noexcept nogil
 
 cdef inline np.float64_t zabs(np.complex128_t z) noexcept nogil:
-    cdef np.npy_cdouble x
+    cdef double_complex x
     memcpy(&x, &z, sizeof(z))
-    return npy_cabs(x)
+    return sm_cabs(x)
 
 cdef inline np.complex128_t zlog(np.complex128_t z) noexcept nogil:
-    cdef np.npy_cdouble x
+    cdef double_complex x
     cdef np.complex128_t out
     memcpy(&x, &z, sizeof(z))
-    x = npy_clog(x)
+    x = sm_clog(x)
     memcpy(&out, &x, sizeof(x))
     return out
 
 cdef inline np.complex128_t zexp(np.complex128_t z) noexcept nogil:
-    cdef np.npy_cdouble x
+    cdef double_complex x
     cdef np.complex128_t out
     memcpy(&x, &z, sizeof(z))
-    x = npy_cexp(x)
+    x = sm_cexp(x)
     memcpy(&out, &x, sizeof(x))
     return out

From 22456cc13240baad86daa511c7ef02608eeca243 Mon Sep 17 00:00:00 2001
From: Kevin Sheppard <bashtage@users.noreply.github.com>
Date: Fri, 12 Sep 2025 19:12:13 +0100
Subject: [PATCH 2/2] REF: Remove npy_math reference for cmath

---
 statsmodels/src/math.pxd                                   | 7 ++++---
 statsmodels/tsa/innovations/_arma_innovations.pyx.in       | 4 ++--
 statsmodels/tsa/statespace/_filters/_conventional.pyx.in   | 2 +-
 statsmodels/tsa/statespace/_filters/_univariate.pyx.in     | 2 +-
 .../tsa/statespace/_filters/_univariate_diffuse.pyx.in     | 4 ++--
 statsmodels/tsa/statespace/_representation.pyx.in          | 2 +-
 6 files changed, 11 insertions(+), 10 deletions(-)

diff --git a/statsmodels/src/math.pxd b/statsmodels/src/math.pxd
index 23a3612428f..67baca8c13f 100644
--- a/statsmodels/src/math.pxd
+++ b/statsmodels/src/math.pxd
@@ -1,23 +1,23 @@
 # ## Math Functions
 # Real and complex log and abs functions
-from libc.math cimport log as dlog, abs as dabs, exp as dexp
 cimport numpy as np
+from libc.math cimport M_PI, abs as dabs, exp as dexp, log as dlog
 from libc.string cimport memcpy
 
+
 cdef extern from "_complex_shim.h":
     ctypedef double double_complex
     double sm_cabs(double_complex z) nogil
     double_complex sm_clog(double_complex z) nogil
     double_complex sm_cexp(double_complex z) nogil
 
-cdef extern from "numpy/npy_math.h":
-    np.float64_t NPY_PI
 
 cdef inline np.float64_t zabs(np.complex128_t z) noexcept nogil:
     cdef double_complex x
     memcpy(&x, &z, sizeof(z))
     return sm_cabs(x)
 
+
 cdef inline np.complex128_t zlog(np.complex128_t z) noexcept nogil:
     cdef double_complex x
     cdef np.complex128_t out
@@ -26,6 +26,7 @@ cdef inline np.complex128_t zlog(np.complex128_t z) noexcept nogil:
     memcpy(&out, &x, sizeof(x))
     return out
 
+
 cdef inline np.complex128_t zexp(np.complex128_t z) noexcept nogil:
     cdef double_complex x
     cdef np.complex128_t out
diff --git a/statsmodels/tsa/innovations/_arma_innovations.pyx.in b/statsmodels/tsa/innovations/_arma_innovations.pyx.in
index f2cd4749b8a..ba81670fb9b 100644
--- a/statsmodels/tsa/innovations/_arma_innovations.pyx.in
+++ b/statsmodels/tsa/innovations/_arma_innovations.pyx.in
@@ -23,7 +23,7 @@ TYPES = {
 import numpy as np
 import warnings
 from statsmodels.tsa import arima_process
-from statsmodels.src.math cimport NPY_PI, dlog, zlog
+from statsmodels.src.math cimport M_PI, dlog, zlog
 cimport numpy as cnp
 cimport cython
 
@@ -479,7 +479,7 @@ cpdef {{prefix}}arma_loglikeobs_fast({{cython_type}} [:] endog,
     dim1[0] = nobs;
     llf_obs = cnp.PyArray_ZEROS(1, dim1, {{typenum}}, C)
 
-    const = {{combined_prefix}}log(2*NPY_PI)
+    const = {{combined_prefix}}log(2*M_PI)
     for i in range(nobs):
         llf_obs[i] = -0.5 * u[i]**2 / (sigma2 * v[i]) - 0.5 * (const + {{combined_prefix}}log(sigma2 * v[i]))
 
diff --git a/statsmodels/tsa/statespace/_filters/_conventional.pyx.in b/statsmodels/tsa/statespace/_filters/_conventional.pyx.in
index ad73ac2aded..3f071bfc123 100644
--- a/statsmodels/tsa/statespace/_filters/_conventional.pyx.in
+++ b/statsmodels/tsa/statespace/_filters/_conventional.pyx.in
@@ -390,7 +390,7 @@ cdef {{cython_type}} {{prefix}}loglikelihood_conventional({{prefix}}KalmanFilter
         {{cython_type}} alpha = 1.0
         {{cython_type}} beta = 0.0
 
-    loglikelihood = -0.5*(model._k_endog*{{combined_prefix}}log(2*NPY_PI) + determinant)
+    loglikelihood = -0.5*(model._k_endog*{{combined_prefix}}log(2*M_PI) + determinant)
 
     if not kfilter.filter_method & FILTER_CONCENTRATED:
         {{if combined_prefix == 'd'}}
diff --git a/statsmodels/tsa/statespace/_filters/_univariate.pyx.in b/statsmodels/tsa/statespace/_filters/_univariate.pyx.in
index 843a2cfbd5e..9008960c1fb 100644
--- a/statsmodels/tsa/statespace/_filters/_univariate.pyx.in
+++ b/statsmodels/tsa/statespace/_filters/_univariate.pyx.in
@@ -436,7 +436,7 @@ cdef void {{prefix}}chandrasekhar_recursion({{prefix}}KalmanFilter kfilter, {{pr
 cdef void {{prefix}}loglikelihood({{prefix}}KalmanFilter kfilter, {{prefix}}Statespace model, int i, {{cython_type}} forecast_error_cov, {{cython_type}} forecast_error_cov_inv):
     kfilter._loglikelihood[0] = (
         kfilter._loglikelihood[0] - 0.5*(
-            {{combined_prefix}}log(2 * NPY_PI * forecast_error_cov)
+            {{combined_prefix}}log(2 * M_PI * forecast_error_cov)
         )
     )
     if kfilter.filter_method & FILTER_CONCENTRATED:
diff --git a/statsmodels/tsa/statespace/_filters/_univariate_diffuse.pyx.in b/statsmodels/tsa/statespace/_filters/_univariate_diffuse.pyx.in
index 441babd17f6..548bffce41d 100644
--- a/statsmodels/tsa/statespace/_filters/_univariate_diffuse.pyx.in
+++ b/statsmodels/tsa/statespace/_filters/_univariate_diffuse.pyx.in
@@ -146,7 +146,7 @@ cdef int {{prefix}}forecast_univariate_diffuse({{prefix}}KalmanFilter kfilter, {
             # Loglikelihood
             kfilter._loglikelihood[0] = (
                 kfilter._loglikelihood[0] - 0.5*(
-                    {{combined_prefix}}log(2 * NPY_PI * forecast_error_diffuse_cov)))
+                    {{combined_prefix}}log(2 * M_PI * forecast_error_diffuse_cov)))
         elif forecast_error_cov{{if combined_prefix == 'z'}}.real{{endif}} > kfilter.tolerance_diffuse:
             kfilter.nobs_kendog_diffuse_nonsingular = kfilter.nobs_kendog_diffuse_nonsingular + 1
             forecast_error_cov_inv = 1.0 / forecast_error_cov
@@ -181,7 +181,7 @@ cdef int {{prefix}}forecast_univariate_diffuse({{prefix}}KalmanFilter kfilter, {
             if not forecast_error_cov == 0:
                 kfilter._loglikelihood[0] = (
                     kfilter._loglikelihood[0] - 0.5*(
-                        {{combined_prefix}}log(2 * NPY_PI * forecast_error_cov)))
+                        {{combined_prefix}}log(2 * M_PI * forecast_error_cov)))
 
                 if kfilter.filter_method & FILTER_CONCENTRATED:
                     kfilter._scale[0] = kfilter._scale[0] + kfilter._forecast_error[i]**2 * forecast_error_cov_inv
diff --git a/statsmodels/tsa/statespace/_representation.pyx.in b/statsmodels/tsa/statespace/_representation.pyx.in
index dcb1c838cfb..4ae99e87099 100644
--- a/statsmodels/tsa/statespace/_representation.pyx.in
+++ b/statsmodels/tsa/statespace/_representation.pyx.in
@@ -1000,7 +1000,7 @@ cdef class {{prefix}}Statespace(object):
             # (p-m) log( 2*pi) + log( |H_t| )
             self.collapse_loglikelihood = (
                 self.collapse_loglikelihood +
-                (self._k_endog - k_states)*{{combined_prefix}}log(2*NPY_PI) + 
+                (self._k_endog - k_states)*{{combined_prefix}}log(2*M_PI) +
                 self.transform_determinant
             )
 
