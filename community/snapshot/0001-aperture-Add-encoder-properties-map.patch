From c7a82e126c6fa943d35a8d7152b1fa8913ba5e87 Mon Sep 17 00:00:00 2001
From: Robert Mader <robert.mader@collabora.com>
Date: Sun, 28 Sep 2025 00:40:42 +0200
Subject: [PATCH 1/3] aperture: Add encoder properties map

Set properties for some common encoders. Setting a common target bitrate
makes quality and file sizes more similar and predictable - hardware
encoders tend to produce very big files by default. v4l2 encoders are
left out for now as they are a bit more complicated, using a
"extra-controls" structure.

Also add some basic real-time tuning to x264enc, improving the recording
experience a lot on low-end devices.

(cherry picked from commit 767e0ff1a9fb4d61dd40baf4789b5b0c591cc357)
---
 Cargo.toml                 |  2 +-
 aperture/src/viewfinder.rs | 59 ++++++++++++++++++++++++++++++++++++++
 2 files changed, 60 insertions(+), 1 deletion(-)

diff --git a/Cargo.toml b/Cargo.toml
index 1bf0a91..d6e6896 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -12,7 +12,7 @@ log = "0.4"
 futures-channel = "0.3.30"
 gst = { package = "gstreamer", version = "0.24" , features = ["v1_20"] }
 gst-base = { package = "gstreamer-base", version = "0.24" }
-gst-pbutils = { package = "gstreamer-pbutils", version = "0.24" }
+gst-pbutils = { package = "gstreamer-pbutils", version = "0.24", features = ["v1_20"] }
 gst-video = { package = "gstreamer-video", version = "0.24" }
 gtk = { package = "gtk4", version = "0.10", features = ["gnome_46", "v4_18"] }
 
diff --git a/aperture/src/viewfinder.rs b/aperture/src/viewfinder.rs
index 399fd49..9d0c981 100644
--- a/aperture/src/viewfinder.rs
+++ b/aperture/src/viewfinder.rs
@@ -12,6 +12,11 @@ use crate::VideoFormat;
 use crate::ViewfinderState;
 use crate::code_detector::QrCodeDetector;
 
+/// Default bitrate
+///
+/// This is the Gstreamer 1.26 default value for x264enc, chosen as reasonable compromise between
+/// quality and file size. Candidate for a preference.
+const DEFAULT_BITRATE: u32 = 2048;
 const PROVIDER_TIMEOUT: u64 = 2;
 
 #[derive(Debug)]
@@ -890,6 +895,58 @@ impl Viewfinder {
 
     fn setup_recording(&self) {
         use gst_pbutils::encoding_profile::EncodingProfileBuilder;
+        use gst_pbutils::{ElementProperties, ElementPropertiesMapItem};
+
+        // Video encoder properties
+        let element_properties_map = ElementProperties::builder_map()
+            .item(
+                ElementPropertiesMapItem::builder("x264enc")
+                    .field("bitrate", DEFAULT_BITRATE)
+                    // tune "zerolatency": Suitable for live-sources like cameras. Crucial to avoid
+                    //                     draining the buffer pool.
+                    .field("tune", 4)
+                    // speed-preset "faster": Lower CPU usage compared to the default "medium" with
+                    //                        minimal reduction of quality, see
+                    //                        https://streaminglearningcenter.com/wp-content/uploads/2019/10/Choosing-an-x264-Preset_1.pdf
+                    .field("speed-preset", 4)
+                    .build(),
+            )
+            .item(
+                ElementPropertiesMapItem::builder("openh264enc")
+                    .field("bitrate", DEFAULT_BITRATE)
+                    .build(),
+            )
+            .item(
+                ElementPropertiesMapItem::builder("vah264lpenc")
+                    .field("bitrate", DEFAULT_BITRATE)
+                    .build(),
+            )
+            .item(
+                ElementPropertiesMapItem::builder("vah264enc")
+                    .field("bitrate", DEFAULT_BITRATE)
+                    .build(),
+            )
+            .item(
+                ElementPropertiesMapItem::builder("vulkanh264enc")
+                    .field("bitrate", DEFAULT_BITRATE)
+                    .build(),
+            )
+            .item(
+                ElementPropertiesMapItem::builder("vp8enc")
+                    .field("target-bitrate", DEFAULT_BITRATE)
+                    .build(),
+            )
+            .item(
+                ElementPropertiesMapItem::builder("vavp8lpenc")
+                    .field("bitrate", DEFAULT_BITRATE)
+                    .build(),
+            )
+            .item(
+                ElementPropertiesMapItem::builder("vavp8enc")
+                    .field("bitrate", DEFAULT_BITRATE)
+                    .build(),
+            )
+            .build();
 
         let profile = match self.video_format() {
             VideoFormat::H264Mp4 => {
@@ -937,6 +994,7 @@ impl Viewfinder {
                     &gst::Caps::builder("video/x-h264").build(),
                 )
                 .variable_framerate(true)
+                .element_properties(element_properties_map)
                 .build();
                 container_profile = container_profile.add_profile(video_profile);
 
@@ -996,6 +1054,7 @@ impl Viewfinder {
                 )
                 .preset("Profile Realtime")
                 .variable_framerate(true)
+                .element_properties(element_properties_map)
                 .build();
                 container_profile = container_profile.add_profile(video_profile);
 
-- 
2.51.0

