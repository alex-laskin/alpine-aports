--- a/src/test/test_sandbox.c
+++ b/src/test/test_sandbox.c
@@ -150,32 +150,6 @@ test_sandbox_is_active(void *ignored)
 }
 
 static void
-test_sandbox_open_filename(void *arg)
-{
-  sandbox_data_t *data = arg;
-  int fd, errsv;
-
-  fd = open(sandbox_intern_string(data->file_ops_allowed), O_RDONLY);
-  if (fd == -1)
-    tt_abort_perror("open");
-  close(fd);
-
-  /* It might be nice to use sandbox_intern_string() in the line below as well
-   * (and likewise in the test cases that follow) but this would require
-   * capturing the warning message it logs, and the mechanism for doing so
-   * relies on system calls that are normally blocked by the sandbox and may
-   * vary across architectures. */
-  fd = open(data->file_ops_blocked, O_RDONLY);
-  errsv = errno;
-  tt_int_op(fd, OP_EQ, -1);
-  tt_int_op(errsv, OP_EQ, EPERM);
-
- done:
-  if (fd >= 0)
-    close(fd);
-}
-
-static void
 test_sandbox_chmod_filename(void *arg)
 {
   sandbox_data_t *data = arg;
@@ -255,28 +229,6 @@ test_sandbox_openat_filename(void *arg)
 }
 
 static void
-test_sandbox_opendir_dirname(void *arg)
-{
-  sandbox_data_t *data = arg;
-  DIR *dir;
-  int errsv;
-
-  dir = opendir(sandbox_intern_string(data->dir_ops_allowed));
-  if (dir == NULL)
-    tt_abort_perror("opendir");
-  closedir(dir);
-
-  dir = opendir(data->dir_ops_blocked);
-  errsv = errno;
-  tt_ptr_op(dir, OP_EQ, NULL);
-  tt_int_op(errsv, OP_EQ, EPERM);
-
- done:
-  if (dir)
-    closedir(dir);
-}
-
-static void
 test_sandbox_stat_filename(void *arg)
 {
   sandbox_data_t *data = arg;
@@ -374,9 +326,6 @@ struct testcase_t sandbox_tests[] = {
 #ifdef ENABLE_FRAGILE_HARDENING
   SANDBOX_TEST_SKIPPED(open_filename),
   SANDBOX_TEST_SKIPPED(opendir_dirname),
-#else
-  SANDBOX_TEST_IN_SANDBOX(open_filename),
-  SANDBOX_TEST_IN_SANDBOX(opendir_dirname),
 #endif /* defined(ENABLE_FRAGILE_HARDENING) */
 
   SANDBOX_TEST_IN_SANDBOX(openat_filename),
