--- a/src/test/test_sandbox.c
+++ b/src/test/test_sandbox.c
@@ -150,45 +150,6 @@ test_sandbox_is_active(void *ignored)
 }
 
 static void
-test_sandbox_chmod_filename(void *arg)
-{
-  sandbox_data_t *data = arg;
-  int rc, errsv;
-
-  if (chmod(sandbox_intern_string(data->file_ops_allowed),
-            S_IRUSR | S_IWUSR) != 0)
-    tt_abort_perror("chmod");
-
-  rc = chmod(data->file_ops_blocked, S_IRUSR | S_IWUSR);
-  errsv = errno;
-  tt_int_op(rc, OP_EQ, -1);
-  tt_int_op(errsv, OP_EQ, EPERM);
-
- done:
-  (void)0;
-}
-
-static void
-test_sandbox_rename_filename(void *arg)
-{
-  sandbox_data_t *data = arg;
-  const char *fname_old = sandbox_intern_string(data->file_ops_allowed),
-    *fname_new = sandbox_intern_string(data->file_rename_target_allowed);
-  int rc, errsv;
-
-  if (rename(fname_old, fname_new) != 0)
-    tt_abort_perror("rename");
-
-  rc = rename(fname_new, fname_old);
-  errsv = errno;
-  tt_int_op(rc, OP_EQ, -1);
-  tt_int_op(errsv, OP_EQ, EPERM);
-
- done:
-  (void)0;
-}
-
-static void
 test_sandbox_openat_filename(void *arg)
 {
   sandbox_data_t *data = arg;
@@ -311,8 +272,6 @@ struct testcase_t sandbox_tests[] = {
 #endif /* defined(ENABLE_FRAGILE_HARDENING) */
 
   SANDBOX_TEST_IN_SANDBOX(openat_filename),
-  SANDBOX_TEST_IN_SANDBOX(chmod_filename),
-  SANDBOX_TEST_IN_SANDBOX(rename_filename),
 
 /* Currently the sandbox is unable to filter stat() calls on systems where
  * glibc implements this function using either of the legacy "stat" or "stat64"
