From 2847249a51b4573a8a7d12daae465369c23295ec Mon Sep 17 00:00:00 2001
From: LN Liberda <lauren@selfisekai.rocks>
Date: Thu, 21 Aug 2025 01:00:07 +0200
Subject: [PATCH] Zig 0.15: std.ArrayList is unmanaged now

---
 src/args.zig | 19 +++++++++++--------
 src/main.zig | 10 +++++-----
 2 files changed, 16 insertions(+), 13 deletions(-)

diff --git a/src/args.zig b/src/args.zig
index 4698441..d2a6928 100644
--- a/src/args.zig
+++ b/src/args.zig
@@ -93,8 +93,8 @@ fn parseInternal(comptime Generic: type, comptime MaybeVerb: ?type, args_iterato
     errdefer result.arena.deinit();
     var result_arena_allocator = result.arena.allocator();
 
-    var arglist = std.ArrayList([:0]const u8).init(allocator);
-    errdefer arglist.deinit();
+    var arglist = std.ArrayList([:0]const u8).empty;
+    errdefer arglist.deinit(allocator);
 
     var last_error: ?anyerror = null;
 
@@ -169,7 +169,7 @@ fn parseInternal(comptime Generic: type, comptime MaybeVerb: ?type, args_iterato
         } else if (std.mem.startsWith(u8, item, "-")) {
             if (std.mem.eql(u8, item, "-")) {
                 // single hyphen is considered a positional argument
-                try arglist.append(try result_arena_allocator.dupeZ(u8, item));
+                try arglist.append(allocator, try result_arena_allocator.dupeZ(u8, item));
             } else {
                 var any_shorthands = false;
                 for (item[1..], 0..) |char, index| {
@@ -275,7 +275,7 @@ fn parseInternal(comptime Generic: type, comptime MaybeVerb: ?type, args_iterato
                 }
             }
 
-            try arglist.append(try result_arena_allocator.dupeZ(u8, item));
+            try arglist.append(allocator, try result_arena_allocator.dupeZ(u8, item));
         }
     }
 
@@ -285,10 +285,10 @@ fn parseInternal(comptime Generic: type, comptime MaybeVerb: ?type, args_iterato
     // This will consume the rest of the arguments as positional ones.
     // Only executes when the above loop is broken.
     while (args_iterator.next()) |item| {
-        try arglist.append(try result_arena_allocator.dupeZ(u8, item));
+        try arglist.append(allocator, try result_arena_allocator.dupeZ(u8, item));
     }
 
-    result.positionals = try arglist.toOwnedSlice();
+    result.positionals = try arglist.toOwnedSlice(allocator);
     return result;
 }
 
@@ -545,11 +545,14 @@ pub const ErrorCollection = struct {
     const Self = @This();
 
     arena: std.heap.ArenaAllocator,
+    alloc: std.mem.Allocator,
     list: std.ArrayList(Error),
 
     pub fn init(allocator: std.mem.Allocator) Self {
+        const arena = std.heap.ArenaAllocator.init(allocator);
         return Self{
-            .arena = std.heap.ArenaAllocator.init(allocator),
+            .arena = arena,
+            .alloc = arena.allocator(),
             .list = std.ArrayList(Error).init(allocator),
         };
     }
@@ -577,7 +580,7 @@ pub const ErrorCollection = struct {
                 .unknown, .out_of_memory, .unsupported, .invalid_placement, .missing_argument, .missing_executable_name, .unknown_verb => err.kind,
             },
         };
-        try self.list.append(dupe);
+        try self.list.append(self.alloc, dupe);
     }
 };
 
diff --git a/src/main.zig b/src/main.zig
index 0e7bf7a..1b0740a 100644
--- a/src/main.zig
+++ b/src/main.zig
@@ -99,7 +99,7 @@ fn readAddressBook(
                 trimmed_value = trimmed_key;
             }
             try kvmap.put(trimmed_key, trimmed_value);
-            try keylist.append(trimmed_key);
+            try keylist.append(alloc, trimmed_key);
         }
     }
 }
@@ -255,9 +255,9 @@ fn parseAddresses(
     while (it.next()) |addr| {
         // split into parts separated by whitespace
         var t_it = std.mem.tokenizeSequence(u8, addr, " \t\n\r");
-        var parts = std.ArrayList([]const u8).init(a);
+        var parts = std.ArrayList([]const u8).empty;
         while (t_it.next()) |part| {
-            try parts.append(part);
+            try parts.append(a, part);
         }
         // join back again into nice email address without excessive
         // whitespace
@@ -403,8 +403,8 @@ pub fn main() anyerror!void {
         }
 
         const max_file_size = 1024 * 1024;
-        var list = std.ArrayList([]const u8).init(alloc);
-        defer list.deinit();
+        var list = std.ArrayList([]const u8).empty;
+        defer list.deinit(alloc);
 
         var map = std.StringHashMap([]const u8).init(alloc);
         defer map.deinit();
