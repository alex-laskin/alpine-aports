Author: Simon Frankenberger <simon-alpine@fraho.eu>
Subject: Disable failing tests
Upstream: Yes (https://bugs.openjdk.org/browse/JDK-8299245)

"Some gtests do not work well in non-debug build"
Disable failing tests as workaround

--- old/test/hotspot/gtest/runtime/test_os_linux.cpp
+++ new/test/hotspot/gtest/runtime/test_os_linux.cpp
@@ -473,6 +473,7 @@ TEST(os_linux, addr_to_function_valid) {
 
 #if !defined(__clang_major__) || (__clang_major__ >= 5) // DWARF does not support Clang versions older than 5.0.
 // Test valid address of method ReportJNIFatalError in jniCheck.hpp. We should get "jniCheck.hpp" in the buffer and a valid line number.
+#if 0
 TEST_VM(os_linux, decoder_get_source_info_valid) {
   char buf[128] = "";
   int line = -1;
@@ -481,6 +482,7 @@ TEST_VM(os_linux, decoder_get_source_info_valid) {
   EXPECT_STREQ(buf, "jniCheck.hpp");
   ASSERT_TRUE(line > 0);
 }
+#endif
 
 // Test invalid addresses. Should not cause harm and output buffer and line must contain "" and -1, respectively.
 TEST_VM(os_linux, decoder_get_source_info_invalid) {
@@ -500,6 +502,7 @@ TEST_VM(os_linux, decoder_get_source_info_invalid) {
 
 // Test with valid address but a too small buffer to store the entire filename. Should find generic <OVERFLOW> message
 // and a valid line number.
+#if 0
 TEST_VM(os_linux, decoder_get_source_info_valid_overflow) {
   char buf[11] = "";
   int line = -1;
@@ -508,9 +511,11 @@ TEST_VM(os_linux, decoder_get_source_info_valid_overflow) {
   EXPECT_STREQ(buf, "<OVERFLOW>");
   ASSERT_TRUE(line > 0);
 }
+#endif
 
 // Test with valid address but a too small buffer that can neither store the entire filename nor the generic <OVERFLOW>
 // message. We should find "L" as filename and a valid line number.
+#if 0
 TEST_VM(os_linux, decoder_get_source_info_valid_overflow_minimal) {
   char buf[2] = "";
   int line = -1;
@@ -519,6 +524,7 @@ TEST_VM(os_linux, decoder_get_source_info_valid_overflow_minimal) {
   EXPECT_STREQ(buf, "L"); // Overflow message does not fit, so we fall back to "L:line_number"
   ASSERT_TRUE(line > 0); // Line should correctly be found and returned
 }
+#endif
 #endif // clang
 
 #ifdef __GLIBC__
