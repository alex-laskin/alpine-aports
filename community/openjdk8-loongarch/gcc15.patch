--- a/jdk/make/lib/Awt2dLibraries.gmk
+++ b/jdk/make/lib/Awt2dLibraries.gmk
@@ -470,7 +470,7 @@ $(eval $(call SetupNativeCompilation,BUILD_LIBAWT, \
     INCLUDE_FILES := $(LIBAWT_FILES), \
     LANG := $(LIBAWT_LANG), \
     OPTIMIZATION := LOW, \
-    CFLAGS := $(CFLAGS_JDKLIB) $(LIBAWT_CFLAGS), \
+    CFLAGS := $(CFLAGS_JDKLIB) $(LIBAWT_CFLAGS) -std=gnu17, \
     ASFLAGS := $(LIBAWT_ASFLAGS), \
     MAPFILE := $(LIBAWT_MAPFILE), \
     LDFLAGS := $(LDFLAGS_JDKLIB) $(call SET_SHARED_LIBRARY_ORIGIN), \
--- a/jdk/src/share/bin/java.c
+++ b/jdk/src/share/bin/java.c
@@ -145,7 +145,7 @@ static struct vmdesc *knownVMs = NULL;
 static int knownVMsCount = 0;
 static int knownVMsLimit = 0;
 
-static void GrowKnownVMs();
+static void GrowKnownVMs(int);
 static int  KnownVMIndex(const char* name);
 static void FreeKnownVMs();
 static jboolean IsWildCardEnabled();
--- a/jdk/src/share/native/common/jni_util.h
+++ b/jdk/src/share/native/common/jni_util.h
@@ -407,7 +407,7 @@ char* nativeGetStringPlatformChars(JNIEnv *env, jstring jstr, jboolean *isCopy);
 
 int getFastEncoding();
 
-void initializeEncoding();
+void initializeEncoding(JNIEnv *);
 
 void* getProcessHandle();
 
--- a/jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.h
+++ b/jdk/src/solaris/native/sun/awt/awt_GraphicsEnv.h
@@ -50,8 +50,6 @@
 #define MITSHM_PERM_COMMON (0666)
 #define MITSHM_PERM_OWNER  (0600)
 
-extern int XShmQueryExtension();
-
 void TryInitMITShm(JNIEnv *env, jint *shmExt, jint *shmPixmaps);
 void resetXShmAttachFailed();
 jboolean isXShmAttachFailed();
--- a/jdk/src/solaris/native/sun/awt/gtk2_interface.c
+++ b/jdk/src/solaris/native/sun/awt/gtk2_interface.c
@@ -493,8 +493,8 @@ GtkApi* gtk2_load(JNIEnv *env, const char* lib_name)
 {
     gboolean result;
     int i;
-    int (*handler)();
-    int (*io_handler)();
+    int (*handler)(Display *, XErrorEvent *);
+    int (*io_handler)(Display *);
     char *gtk_modules_env;
 
     gtk2_libhandle = dlopen(lib_name, RTLD_LAZY | RTLD_LOCAL);
@@ -1468,7 +1468,7 @@ static GtkWidget *gtk2_get_widget(WidgetType widget_type)
             if (init_result = (NULL == gtk2_widgets[_GTK_NOTEBOOK_TYPE]))
             {
                 gtk2_widgets[_GTK_NOTEBOOK_TYPE] =
-                    (*fp_gtk_notebook_new)(NULL);
+                    (*fp_gtk_notebook_new)();
             }
             result = gtk2_widgets[_GTK_NOTEBOOK_TYPE];
             break;
@@ -1476,7 +1476,7 @@ static GtkWidget *gtk2_get_widget(WidgetType widget_type)
             if (init_result = (NULL == gtk2_widgets[_GTK_TOGGLE_BUTTON_TYPE]))
             {
                 gtk2_widgets[_GTK_TOGGLE_BUTTON_TYPE] =
-                    (*fp_gtk_toggle_button_new)(NULL);
+                    (*fp_gtk_toggle_button_new)();
             }
             result = gtk2_widgets[_GTK_TOGGLE_BUTTON_TYPE];
             break;
@@ -1485,7 +1485,7 @@ static GtkWidget *gtk2_get_widget(WidgetType widget_type)
             if (init_result = (NULL == gtk2_widgets[_GTK_TOOLBAR_TYPE]))
             {
                 gtk2_widgets[_GTK_TOOLBAR_TYPE] =
-                    (*fp_gtk_toolbar_new)(NULL);
+                    (*fp_gtk_toolbar_new)();
             }
             result = gtk2_widgets[_GTK_TOOLBAR_TYPE];
             break;
--- a/jdk/src/solaris/native/sun/awt/gtk3_interface.c
+++ b/jdk/src/solaris/native/sun/awt/gtk3_interface.c
@@ -264,8 +264,8 @@ GtkApi* gtk3_load(JNIEnv *env, const char* lib_name)
 {
     gboolean result;
     int i;
-    int (*handler)();
-    int (*io_handler)();
+    int (*handler)(Display *, XErrorEvent *);
+    int (*io_handler)(Display *);
     char *gtk_modules_env;
     gtk3_libhandle = dlopen(lib_name, RTLD_LAZY | RTLD_LOCAL);
     if (gtk3_libhandle == NULL) {
@@ -1241,7 +1241,7 @@ static GtkWidget *gtk3_get_widget(WidgetType widget_type)
             if (init_result = (NULL == gtk3_widgets[_GTK_NOTEBOOK_TYPE]))
             {
                 gtk3_widgets[_GTK_NOTEBOOK_TYPE] =
-                    (*fp_gtk_notebook_new)(NULL);
+                    (*fp_gtk_notebook_new)();
             }
             result = gtk3_widgets[_GTK_NOTEBOOK_TYPE];
             break;
@@ -1249,7 +1249,7 @@ static GtkWidget *gtk3_get_widget(WidgetType widget_type)
             if (init_result = (NULL == gtk3_widgets[_GTK_TOGGLE_BUTTON_TYPE]))
             {
                 gtk3_widgets[_GTK_TOGGLE_BUTTON_TYPE] =
-                    (*fp_gtk_toggle_button_new)(NULL);
+                    (*fp_gtk_toggle_button_new)();
             }
             result = gtk3_widgets[_GTK_TOGGLE_BUTTON_TYPE];
             break;
@@ -1258,7 +1258,7 @@ static GtkWidget *gtk3_get_widget(WidgetType widget_type)
             if (init_result = (NULL == gtk3_widgets[_GTK_TOOLBAR_TYPE]))
             {
                 gtk3_widgets[_GTK_TOOLBAR_TYPE] =
-                    (*fp_gtk_toolbar_new)(NULL);
+                    (*fp_gtk_toolbar_new)();
             }
             result = gtk3_widgets[_GTK_TOOLBAR_TYPE];
             break;
--- a/jdk/src/solaris/native/sun/net/spi/DefaultProxySelector.c
+++ b/jdk/src/solaris/native/sun/net/spi/DefaultProxySelector.c
@@ -94,12 +94,12 @@ g_type_init_func* my_g_type_init_func = NULL;
 typedef struct _GProxyResolver GProxyResolver;
 typedef struct _GSocketConnectable GSocketConnectable;
 typedef struct GError GError;
-typedef GProxyResolver* g_proxy_resolver_get_default_func();
-typedef char** g_proxy_resolver_lookup_func();
-typedef GSocketConnectable* g_network_address_parse_uri_func();
-typedef const char* g_network_address_get_hostname_func();
-typedef unsigned short g_network_address_get_port_func();
-typedef void g_strfreev_func();
+typedef GProxyResolver* g_proxy_resolver_get_default_func(void);
+typedef char** g_proxy_resolver_lookup_func(GProxyResolver* resolver, char* uri, void *null, GError **error_p);
+typedef GSocketConnectable* g_network_address_parse_uri_func(char* proxy, unsigned short default_port, GError **error_p);
+typedef const char* g_network_address_get_hostname_func(GSocketConnectable* conn);
+typedef unsigned short g_network_address_get_port_func(GSocketConnectable* conn);
+typedef void g_strfreev_func(char** proxies);
 
 static g_proxy_resolver_get_default_func* g_proxy_resolver_get_default = NULL;
 static g_proxy_resolver_lookup_func* g_proxy_resolver_lookup = NULL;
