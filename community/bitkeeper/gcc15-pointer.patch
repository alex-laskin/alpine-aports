Patch-Source-1: https://core.tcl-lang.org/tcl/info/729ffb738f1c7936
Patch-Source-2: https://core.tcl-lang.org/tk/info/28c359044f356c5b
Patch-Source-3: https://github.com/chpock/tktable/commit/3a2de639485a9e07d5de360f8911bc55ccad9454

--- a/src/gui/tcltk/tcl/generic/tclTomMathDecls.h
+++ b/src/gui/tcltk/tcl/generic/tclTomMathDecls.h
@@ -159,15 +159,15 @@ EXTERN void		TclBN_mp_clear(mp_int *a);
 /* 7 */
 EXTERN void		TclBN_mp_clear_multi(mp_int *a, ...);
 /* 8 */
-EXTERN int		TclBN_mp_cmp(mp_int *a, mp_int *b);
+EXTERN int		TclBN_mp_cmp(const mp_int *a, const mp_int *b);
 /* 9 */
-EXTERN int		TclBN_mp_cmp_d(mp_int *a, mp_digit b);
+EXTERN int		TclBN_mp_cmp_d(const mp_int *a, mp_digit b);
 /* 10 */
-EXTERN int		TclBN_mp_cmp_mag(mp_int *a, mp_int *b);
+EXTERN int		TclBN_mp_cmp_mag(const mp_int *a, const mp_int *b);
 /* 11 */
-EXTERN int		TclBN_mp_copy(mp_int *a, mp_int *b);
+EXTERN int		TclBN_mp_copy(const mp_int *a, mp_int *b);
 /* 12 */
-EXTERN int		TclBN_mp_count_bits(mp_int *a);
+EXTERN int		TclBN_mp_count_bits(const mp_int *a);
 /* 13 */
 EXTERN int		TclBN_mp_div(mp_int *a, mp_int *b, mp_int *q,
 				mp_int *r);
@@ -177,7 +177,7 @@ EXTERN int		TclBN_mp_div_d(mp_int *a, mp_digit b, mp_int *q,
 /* 15 */
 EXTERN int		TclBN_mp_div_2(mp_int *a, mp_int *q);
 /* 16 */
-EXTERN int		TclBN_mp_div_2d(mp_int *a, int b, mp_int *q,
+EXTERN int		TclBN_mp_div_2d(const mp_int *a, int b, mp_int *q,
 				mp_int *r);
 /* 17 */
 EXTERN int		TclBN_mp_div_3(mp_int *a, mp_int *q, mp_digit *r);
@@ -202,7 +202,7 @@ EXTERN int		TclBN_mp_lshd(mp_int *a, int shift);
 /* 27 */
 EXTERN int		TclBN_mp_mod(mp_int *a, mp_int *b, mp_int *r);
 /* 28 */
-EXTERN int		TclBN_mp_mod_2d(mp_int *a, int b, mp_int *r);
+EXTERN int		TclBN_mp_mod_2d(const mp_int *a, int b, mp_int *r);
 /* 29 */
 EXTERN int		TclBN_mp_mul(mp_int *a, mp_int *b, mp_int *p);
 /* 30 */
@@ -210,9 +210,9 @@ EXTERN int		TclBN_mp_mul_d(mp_int *a, mp_digit b, mp_int *p);
 /* 31 */
 EXTERN int		TclBN_mp_mul_2(mp_int *a, mp_int *p);
 /* 32 */
-EXTERN int		TclBN_mp_mul_2d(mp_int *a, int d, mp_int *p);
+EXTERN int		TclBN_mp_mul_2d(const mp_int *a, int d, mp_int *p);
 /* 33 */
-EXTERN int		TclBN_mp_neg(mp_int *a, mp_int *b);
+EXTERN int		TclBN_mp_neg(const mp_int *a, mp_int *b);
 /* 34 */
 EXTERN int		TclBN_mp_or(mp_int *a, mp_int *b, mp_int *c);
 /* 35 */
@@ -278,7 +278,7 @@ EXTERN int		TclBN_mp_init_set_int(mp_int *a, unsigned long i);
 /* 62 */
 EXTERN int		TclBN_mp_set_int(mp_int *a, unsigned long i);
 /* 63 */
-EXTERN int		TclBN_mp_cnt_lsb(mp_int *a);
+EXTERN int		TclBN_mp_cnt_lsb(const mp_int *a);
 
 typedef struct TclTomMathStubs {
     int magic;
--- a/src/tommath/bn_mp_cmp.c
+++ b/src/tommath/bn_mp_cmp.c
@@ -17,7 +17,7 @@
 
 /* compare two ints (signed)*/
 int
-mp_cmp (mp_int * a, mp_int * b)
+mp_cmp (const mp_int * a, const mp_int * b)
 {
   /* compare based on sign */
   if (a->sign != b->sign) {
--- a/src/tommath/bn_mp_cmp_d.c
+++ b/src/tommath/bn_mp_cmp_d.c
@@ -16,7 +16,7 @@
  */
 
 /* compare a digit */
-int mp_cmp_d(mp_int * a, mp_digit b)
+int mp_cmp_d(const mp_int * a, mp_digit b)
 {
   /* compare based on sign */
   if (a->sign == MP_NEG) {
--- a/src/tommath/bn_mp_cmp_mag.c
+++ b/src/tommath/bn_mp_cmp_mag.c
@@ -16,7 +16,7 @@
  */
 
 /* compare maginitude of two ints (unsigned) */
-int mp_cmp_mag (mp_int * a, mp_int * b)
+int mp_cmp_mag (const mp_int * a, const mp_int * b)
 {
   int     n;
   mp_digit *tmpa, *tmpb;
--- a/src/tommath/bn_mp_cnt_lsb.c
+++ b/src/tommath/bn_mp_cnt_lsb.c
@@ -20,7 +20,7 @@ static const int lnz[16] = {
 };
 
 /* Counts the number of lsbs which are zero before the first zero bit */
-int mp_cnt_lsb(mp_int *a)
+int mp_cnt_lsb(const mp_int *a)
 {
    int x;
    mp_digit q, qq;
--- a/src/tommath/bn_mp_copy.c
+++ b/src/tommath/bn_mp_copy.c
@@ -17,7 +17,7 @@
 
 /* copy, b = a */
 int
-mp_copy (mp_int * a, mp_int * b)
+mp_copy (const mp_int * a, mp_int * b)
 {
   int     res, n;
 
--- a/src/tommath/bn_mp_count_bits.c
+++ b/src/tommath/bn_mp_count_bits.c
@@ -17,7 +17,7 @@
 
 /* returns the number of bits in an int */
 int
-mp_count_bits (mp_int * a)
+mp_count_bits (const mp_int * a)
 {
   int     r;
   mp_digit q;
--- a/src/tommath/bn_mp_div_2d.c
+++ b/src/tommath/bn_mp_div_2d.c
@@ -16,7 +16,7 @@
  */
 
 /* shift right by a certain bit count (store quotient in c, optional remainder in d) */
-int mp_div_2d (mp_int * a, int b, mp_int * c, mp_int * d)
+int mp_div_2d (const mp_int * a, int b, mp_int * c, mp_int * d)
 {
   mp_digit D, r, rr;
   int     x, res;
--- a/src/tommath/bn_mp_mod_2d.c
+++ b/src/tommath/bn_mp_mod_2d.c
@@ -17,7 +17,7 @@
 
 /* calc a value mod 2**b */
 int
-mp_mod_2d (mp_int * a, int b, mp_int * c)
+mp_mod_2d (const mp_int * a, int b, mp_int * c)
 {
   int     x, res;
 
--- a/src/tommath/bn_mp_mul_2d.c
+++ b/src/tommath/bn_mp_mul_2d.c
@@ -16,7 +16,7 @@
  */
 
 /* shift left by a certain bit count */
-int mp_mul_2d (mp_int * a, int b, mp_int * c)
+int mp_mul_2d (const mp_int * a, int b, mp_int * c)
 {
   mp_digit d;
   int      res;
--- a/src/tommath/bn_mp_neg.c
+++ b/src/tommath/bn_mp_neg.c
@@ -16,7 +16,7 @@
  */
 
 /* b = -a */
-int mp_neg (mp_int * a, mp_int * b)
+int mp_neg (const mp_int * a, mp_int * b)
 {
   int     res;
   if (a != b) {
--- a/src/tommath/tommath.h
+++ b/src/tommath/tommath.h
@@ -241,7 +241,7 @@ int mp_init_set (mp_int * a, mp_digit b);
 int mp_init_set_int (mp_int * a, unsigned long b);
 
 /* copy, b = a */
-int mp_copy(mp_int *a, mp_int *b);
+int mp_copy(const mp_int *a, mp_int *b);
 
 /* inits and copies, a = b */
 int mp_init_copy(mp_int *a, mp_int *b);
@@ -258,19 +258,19 @@ void mp_rshd(mp_int *a, int b);
 int mp_lshd(mp_int *a, int b);
 
 /* c = a / 2**b */
-int mp_div_2d(mp_int *a, int b, mp_int *c, mp_int *d);
+int mp_div_2d(const mp_int *a, int b, mp_int *c, mp_int *d);
 
 /* b = a/2 */
 int mp_div_2(mp_int *a, mp_int *b);
 
 /* c = a * 2**b */
-int mp_mul_2d(mp_int *a, int b, mp_int *c);
+int mp_mul_2d(const mp_int *a, int b, mp_int *c);
 
 /* b = a*2 */
 int mp_mul_2(mp_int *a, mp_int *b);
 
 /* c = a mod 2**d */
-int mp_mod_2d(mp_int *a, int b, mp_int *c);
+int mp_mod_2d(const mp_int *a, int b, mp_int *c);
 
 /* computes a = 2**b */
 int mp_2expt(mp_int *a, int b);
@@ -296,16 +296,16 @@ int mp_and(mp_int *a, mp_int *b, mp_int *c);
 /* ---> Basic arithmetic <--- */
 
 /* b = -a */
-int mp_neg(mp_int *a, mp_int *b);
+int mp_neg(const mp_int *a, mp_int *b);
 
 /* b = |a| */
 int mp_abs(mp_int *a, mp_int *b);
 
 /* compare a to b */
-int mp_cmp(mp_int *a, mp_int *b);
+int mp_cmp(const mp_int *a, const mp_int *b);
 
 /* compare |a| to |b| */
-int mp_cmp_mag(mp_int *a, mp_int *b);
+int mp_cmp_mag(const mp_int *a, const mp_int *b);
 
 /* c = a + b */
 int mp_add(mp_int *a, mp_int *b, mp_int *c);
@@ -328,7 +328,7 @@ int mp_mod(mp_int *a, mp_int *b, mp_int *c);
 /* ---> single digit functions <--- */
 
 /* compare against a single digit */
-int mp_cmp_d(mp_int *a, mp_digit b);
+int mp_cmp_d(const mp_int *a, mp_digit b);
 
 /* c = a + b */
 int mp_add_d(mp_int *a, mp_digit b, mp_int *c);
@@ -517,7 +517,7 @@ int mp_prime_next_prime(mp_int *a, int t, int bbs_style);
 int mp_prime_random_ex(mp_int *a, int t, int size, int flags, ltm_prime_callback cb, void *dat);
 
 /* ---> radix conversion <--- */
-int mp_count_bits(mp_int *a);
+int mp_count_bits(const mp_int *a);
 
 int mp_unsigned_bin_size(mp_int *a);
 int mp_read_unsigned_bin(mp_int *a, const unsigned char *b, int c);
--- a/src/gui/tcltk/tk/unix/tkUnixEvent.c
+++ b/src/gui/tcltk/tk/unix/tkUnixEvent.c
@@ -485,9 +485,9 @@ DisplayFileProc(
 	 * nice (?!) message.
 	 */
 
-	void (*oldHandler)();
+	void (*oldHandler)(int);
 
-	oldHandler = (void (*)()) signal(SIGPIPE, SIG_IGN);
+	oldHandler = (void (*)(int)) signal(SIGPIPE, SIG_IGN);
 	XNoOp(display);
 	XFlush(display);
 	(void) signal(SIGPIPE, oldHandler);
--- a/src/gui/tcltk/tk/unix/tkUnixSelect.c
+++ b/src/gui/tcltk/tk/unix/tkUnixSelect.c
@@ -349,7 +349,7 @@ TkSelPropProc(
 	    ((char *) buffer)[numItems] = 0;
 
 	    errorHandler = Tk_CreateErrorHandler(eventPtr->xproperty.display,
-		    -1, -1, -1, (int (*)()) NULL, NULL);
+		    -1, -1, -1, NULL, NULL);
 
 	    /*
 	     * Encode the data using the proper format for each type.
@@ -810,7 +810,7 @@ ConvertSelection(
 	    Tcl_GetThreadData(&dataKey, sizeof(ThreadSpecificData));
 
     errorHandler = Tk_CreateErrorHandler(eventPtr->display, -1, -1,-1,
-	    (int (*)()) NULL, NULL);
+	    NULL, NULL);
 
     /*
      * Initialize the reply event.
@@ -1056,7 +1056,7 @@ ConvertSelection(
 	}
 	Tcl_DeleteTimerHandler(incr.timeout);
 	errorHandler = Tk_CreateErrorHandler(winPtr->display,
-		-1, -1, -1, (int (*)()) NULL, NULL);
+		-1, -1, -1, NULL, NULL);
 	XSelectInput(reply.xsel.display, reply.xsel.requestor, 0L);
 	Tk_DeleteErrorHandler(errorHandler);
 	if (tsdPtr->pendingIncrs == &incr) {
--- a/src/gui/tcltk/tktable/generic/tkTable.h
+++ b/src/gui/tcltk/tktable/generic/tkTable.h
@@ -526,7 +526,7 @@ extern void	Table_ClearHashTable(Tcl_HashTable *hashTblPtr);
 extern int	TableOptionBdSet(ClientData clientData,
 			Tcl_Interp *interp, Tk_Window tkwin,
 			CONST84 char *value, char *widgRec, int offset);
-extern char *	TableOptionBdGet(ClientData clientData,
+extern const char *	TableOptionBdGet(ClientData clientData,
 			Tk_Window tkwin, char *widgRec, int offset,
 			Tcl_FreeProc **freeProcPtr);
 extern int	TableTagConfigureBd(Table *tablePtr,
@@ -535,7 +535,7 @@ extern int	Cmd_OptionSet(ClientData clientData,
 			Tcl_Interp *interp,
 			Tk_Window unused, CONST84 char *value,
 			char *widgRec, int offset);
-extern char *	Cmd_OptionGet(ClientData clientData,
+extern const char *	Cmd_OptionGet(ClientData clientData,
 			Tk_Window unused, char *widgRec,
 			int offset, Tcl_FreeProc **freeProcPtr);
 
--- a/src/gui/tcltk/tktable/generic/tkTableTag.c
+++ b/src/gui/tcltk/tktable/generic/tkTableTag.c
@@ -22,7 +22,7 @@ static void	TableImageProc _ANSI_ARGS_((ClientData clientData, int x,
 static int	TableOptionReliefSet _ANSI_ARGS_((ClientData clientData,
 			Tcl_Interp *interp, Tk_Window tkwin,
 			CONST84 char *value, char *widgRec, int offset));
-static char *	TableOptionReliefGet _ANSI_ARGS_((ClientData clientData,
+static const char *	TableOptionReliefGet _ANSI_ARGS_((ClientData clientData,
 			Tk_Window tkwin, char *widgRec, int offset,
 			Tcl_FreeProc **freeProcPtr));
 
@@ -1340,7 +1340,7 @@ TableOptionReliefSet(clientData, interp, tkwin, value, widgRec, offset)
  *----------------------------------------------------------------------
  */
 
-static char *
+static const char *
 TableOptionReliefGet(clientData, tkwin, widgRec, offset, freeProcPtr)
     ClientData clientData;		/* Type of struct being set. */
     Tk_Window tkwin;			/* Window containing canvas widget. */
--- a/src/gui/tcltk/tktable/generic/tkTableUtil.c
+++ b/src/gui/tcltk/tktable/generic/tkTableUtil.c
@@ -169,7 +169,7 @@ TableOptionBdSet(clientData, interp, tkwin, value, widgRec, offset)
  *----------------------------------------------------------------------
  */
 
-char *
+const char *
 TableOptionBdGet(clientData, tkwin, widgRec, offset, freeProcPtr)
     ClientData clientData;		/* Type of struct being set. */
     Tk_Window tkwin;			/* Window containing canvas widget. */
@@ -329,7 +329,7 @@ Cmd_OptionSet(ClientData clientData, Tcl_Interp *interp,
  *----------------------------------------------------------------------
  */
 
-char *
+const char *
 Cmd_OptionGet(ClientData clientData, Tk_Window unused,
 	      char *widgRec, int offset, Tcl_FreeProc **freeProcPtr)
 {
--- a/src/gui/tcltk/tktable/generic/tkTableWin.c
+++ b/src/gui/tcltk/tktable/generic/tkTableWin.c
@@ -17,7 +17,7 @@
 static int	StickyParseProc _ANSI_ARGS_((ClientData clientData,
 			Tcl_Interp *interp, Tk_Window tkwin,
 			CONST84 char *value, char *widgRec, int offset));
-static char *	StickyPrintProc _ANSI_ARGS_((ClientData clientData,
+static const char *	StickyPrintProc _ANSI_ARGS_((ClientData clientData,
 			Tk_Window tkwin, char *widgRec, int offset,
 			Tcl_FreeProc **freeProcPtr));
 
@@ -117,7 +117,7 @@ static Tk_ConfigSpec winConfigSpecs[] = {
  *
  *----------------------------------------------------------------------
  */
-static char *
+static const char *
 StickyPrintProc(clientData, tkwin, widgRec, offset, freeProcPtr)
     ClientData clientData;		/* Ignored. */
     Tk_Window tkwin;			/* Window for text widget. */
