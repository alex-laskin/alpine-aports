--- a/getopt.c
+++ b/getopt.c
@@ -175,7 +175,7 @@ static char *posixly_correct;
 /* Avoid depending on library functions or files
    whose names are inconsistent.  */
 
-char *getenv ();
+char *getenv (const char *);
 
 static char *
 my_index (str, chr)
--- a/getopt.h
+++ b/getopt.h
@@ -101,14 +101,10 @@ struct option
 #define optional_argument	2
 
 #if defined (__STDC__) && __STDC__
-#ifdef __GNU_LIBRARY__
 /* Many other libraries have conflicting prototypes for getopt, with
    differences in the consts, in stdlib.h.  To avoid compilation
    errors, only prototype getopt for the GNU C library.  */
 extern int getopt (int argc, char *const *argv, const char *shortopts);
-#else /* not __GNU_LIBRARY__ */
-extern int getopt ();
-#endif /* __GNU_LIBRARY__ */
 extern int getopt_long (int argc, char *const *argv, const char *shortopts,
 		        const struct option *longopts, int *longind);
 extern int getopt_long_only (int argc, char *const *argv,
--- a/parse.y
+++ b/parse.y
@@ -45,8 +45,6 @@ static int err;  /* value used by parser to store return values */
                               if (var) destroyunit(var); \
                               YYABORT; }
  
-int yylex();
-void yyerror(struct commtype *comm, char *);
 
 #define MAXMEM 100
 int unitcount=0;    /* Counts the number of units allocated by the parser */
@@ -169,6 +167,11 @@ funcunit(struct unittype *theunit, struct function const *fun)
   struct func *unitfunc;
 }
 
+%{
+int yylex(YYSTYPE *lvalp, struct commtype *comm);
+void yyerror(struct commtype *comm, char *);
+%}
+
 %token <number> REAL
 %token <unit> UNIT
 %token <realfunc> REALFUNC
--- a/units.h
+++ b/units.h
@@ -54,7 +54,7 @@
 #  ifdef NO_STRCHR
 #    define strchr(a,b) index((a),(b))
 #  else
-     char *strchr();
+     char *strchr(const char *, int);
 #  endif
 #endif /* !strchr */
 
