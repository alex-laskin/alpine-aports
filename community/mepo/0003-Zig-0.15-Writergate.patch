From 7a17a4e2e43ddf38f968e9df51633fecb60402a3 Mon Sep 17 00:00:00 2001
From: LN Liberda <lauren@selfisekai.rocks>
Date: Thu, 21 Aug 2025 02:37:23 +0200
Subject: [PATCH] Zig 0.15: Writergate

---
 src/Docs.zig | 31 +++++++++++++++++--------------
 src/Mepo.zig | 15 +++++++++------
 2 files changed, 26 insertions(+), 20 deletions(-)

diff --git a/src/Docs.zig b/src/Docs.zig
index dbb0c27..ea748d4 100644
--- a/src/Docs.zig
+++ b/src/Docs.zig
@@ -94,9 +94,10 @@ const DocBaseConfigIntro =
 ;
 
 pub fn generateMarkdownDocs(allocator: std.mem.Allocator) !void {
-    const stdout = std.io.getStdOut().writer();
+    var buf: [1024]u8 = undefined;
+    var stdout = std.fs.File.stdout().writer(&buf);
 
-    try stdout.print(
+    try stdout.interface.print(
         \\# JSON API
         \\
         \\<div class='toc'>
@@ -133,22 +134,22 @@ pub fn generateMarkdownDocs(allocator: std.mem.Allocator) !void {
 
     // API Section
     for (FnTable.fn_specs) |fnc| {
-        try stdout.print("### **{s}**\n", .{fnc.name});
-        try stdout.print("{s}\n\n", .{fnc.desc});
+        try stdout.interface.print("### **{s}**\n", .{fnc.name});
+        try stdout.interface.print("{s}\n\n", .{fnc.desc});
         if (fnc.args.len > 0) {
-            try stdout.print("**Arguments**:\n\n", .{});
-            try stdout.print("| **Name** | **Datatype** | **Description** |\n", .{});
-            try stdout.print("| -------- | ------------ | --------------- |\n", .{});
+            try stdout.interface.print("**Arguments**:\n\n", .{});
+            try stdout.interface.print("| **Name** | **Datatype** | **Description** |\n", .{});
+            try stdout.interface.print("| -------- | ------------ | --------------- |\n", .{});
             for (fnc.args) |arg| {
                 const tag = if (arg.tag == .Number) "Number" else "Text  ";
-                try stdout.print("| {s} | {s} | {s} |\n", .{ arg.name, tag, arg.desc });
+                try stdout.interface.print("| {s} | {s} | {s} |\n", .{ arg.name, tag, arg.desc });
             }
         }
-        try stdout.print("\n---\n\n", .{});
+        try stdout.interface.print("\n---\n\n", .{});
     }
 
     // Prefs Section
-    try stdout.print(
+    try stdout.interface.print(
         \\## Preferences
         \\
         \\ {s}
@@ -156,7 +157,7 @@ pub fn generateMarkdownDocs(allocator: std.mem.Allocator) !void {
     ,
         .{PrefsIntro},
     );
-    try stdout.print(
+    try stdout.interface.print(
         \\| **Name** | **Description** | **Datatype** | **Min** | **Max** | **Default Value** |
         \\| -------- | --------------- | ------------ | ------- | ------- | ----------------- |
         \\
@@ -196,13 +197,13 @@ pub fn generateMarkdownDocs(allocator: std.mem.Allocator) !void {
         defer allocator.free(value);
 
         if (pref.bounds) |bounds| {
-            try stdout.print("| {s} | {s} | {s} | {d} | {d} | {s} |\n", .{ pref.name, pref.desc, datatype, bounds.min, bounds.max, value });
+            try stdout.interface.print("| {s} | {s} | {s} | {d} | {d} | {s} |\n", .{ pref.name, pref.desc, datatype, bounds.min, bounds.max, value });
         } else {
-            try stdout.print("| {s} | {s} | {s} |  |  | {s} |\n", .{ pref.name, pref.desc, datatype, value });
+            try stdout.interface.print("| {s} | {s} | {s} |  |  | {s} |\n", .{ pref.name, pref.desc, datatype, value });
         }
     }
 
-    try stdout.print(
+    try stdout.interface.print(
         \\
         \\---
         \\
@@ -222,4 +223,6 @@ pub fn generateMarkdownDocs(allocator: std.mem.Allocator) !void {
     ,
         .{ DocEnvVarsShellpipe, DocBaseConfigIntro, config.DefaultBaseConfig },
     );
+
+    try stdout.end();
 }
diff --git a/src/Mepo.zig b/src/Mepo.zig
index df3dd62..c2d017c 100644
--- a/src/Mepo.zig
+++ b/src/Mepo.zig
@@ -469,13 +469,16 @@ pub fn init_video_and_sdl_stdin_loop(mepo: *Self, enable_stdin_jsonapi_repl: boo
         sdl.SDL_DetachThread(thread);
 
         mepo.initialized_video.wait();
-        const stdin = &std.io.getStdIn().reader();
+        var in_buffer: [102400]u8 = undefined;
+        var stdin = std.fs.File.stdin().reader(&in_buffer);
+
         while (true) {
-            const read_slice: []const u8 = stdin.readUntilDelimiterAlloc(mepo.allocator, '\n', 102400) catch continue;
-            const slice_z = try mepo.allocator.dupeZ(u8, read_slice);
-            mepo.allocator.free(read_slice);
-            std.debug.print("Read {d} bytes, running input as jsonapi\n", .{slice_z.len});
-            utilsdl.sdl_push_event_jsonapi_execution(slice_z);
+            var read_list = std.io.Writer.Allocating.init(mepo.allocator);
+            _ = stdin.interface.streamDelimiter(&read_list.writer, '\n') catch continue;
+            stdin.interface.toss(1);
+            const read_slice = try read_list.toOwnedSliceSentinel(0);
+            std.debug.print("Read {d} bytes, running input as jsonapi\n", .{read_slice.len});
+            utilsdl.sdl_push_event_jsonapi_execution(read_slice);
         }
     } else {
         _ = mepo_sdl_loop_thread_boot(mepo);
