From 5df3548256b1f727a79c4d8146e281634cca2484 Mon Sep 17 00:00:00 2001
From: LN Liberda <lauren@selfisekai.rocks>
Date: Thu, 21 Aug 2025 03:42:21 +0200
Subject: [PATCH] Zig 0.15: allocPrintZ -> allocPrintSentinel

---
 src/api/clipcopy.zig       |  3 ++-
 src/api/shellpipe_sync.zig |  2 +-
 src/blit/blit.zig          | 18 ++++++++++--------
 src/util/utilfile.zig      |  4 ++--
 src/util/utilprocess.zig   |  2 +-
 5 files changed, 16 insertions(+), 13 deletions(-)

diff --git a/src/api/clipcopy.zig b/src/api/clipcopy.zig
index 6db30b8..f80f8f9 100644
--- a/src/api/clipcopy.zig
+++ b/src/api/clipcopy.zig
@@ -14,10 +14,11 @@ pub const spec = types.MepoFnSpec{
 };
 
 fn execute(mepo: *Mepo, _: [types.MepoFnNargs]types.MepoArg) !void {
-    const copy_text = try std.fmt.allocPrintZ(
+    const copy_text = try std.fmt.allocPrintSentinel(
         mepo.allocator,
         "{d:.5}, {d:.5}",
         .{ p.get(p.pref.lat).f, p.get(p.pref.lon).f },
+        0,
     );
     defer mepo.allocator.free(copy_text);
     try utilsdl.errorcheck(sdl.SDL_SetClipboardText(&copy_text[0]));
diff --git a/src/api/shellpipe_sync.zig b/src/api/shellpipe_sync.zig
index b260e60..bb23817 100644
--- a/src/api/shellpipe_sync.zig
+++ b/src/api/shellpipe_sync.zig
@@ -26,7 +26,7 @@ fn execute(mepo: *Mepo, args: [types.MepoFnNargs]types.MepoArg) !void {
         if (!button.only_visible_when_sync_shellpipe)
             unreachable;
         mepo.allocator.free(button.text);
-        button.text = try std.fmt.allocPrintZ(mepo.allocator, "Cancel {s}", .{cmd});
+        button.text = try std.fmt.allocPrintSentinel(mepo.allocator, "Cancel {s}", .{cmd}, 0);
     }
     sdl.SDL_DetachThread(sdl.SDL_CreateThread(run_sync_shellpipe, "sync_shellpipe", request));
 }
diff --git a/src/blit/blit.zig b/src/blit/blit.zig
index 94b2ad5..7872b7d 100644
--- a/src/blit/blit.zig
+++ b/src/blit/blit.zig
@@ -255,8 +255,8 @@ fn blit_overlay_pindetails(mepo: *Mepo) !void {
     var al = std.ArrayList([2][:0]const u8).empty;
     if (mepo.pin_group_active_item) |_| {
         const pin = mepo.pin_groups[mepo.pin_group_active].items[mepo.pin_group_active_item.?];
-        const pin_coords_str = try std.fmt.allocPrintZ(arena.allocator(), "{d:.5} lat / {d:.5} lon", .{ pin.lat, pin.lon });
-        const distance_str = try std.fmt.allocPrintZ(arena.allocator(), "{d:.2}{s} away", .{
+        const pin_coords_str = try std.fmt.allocPrintSentinel(arena.allocator(), "{d:.5} lat / {d:.5} lon", .{ pin.lat, pin.lon }, 0);
+        const distance_str = try std.fmt.allocPrintSentinel(arena.allocator(), "{d:.2}{s} away", .{
             utilconversion.distance_haversine(
                 if (d_unit_km) .Km else .Mi,
                 p.get(p.pref.lat).f,
@@ -265,28 +265,30 @@ fn blit_overlay_pindetails(mepo: *Mepo) !void {
                 pin.lon,
             ),
             d_unit,
-        });
+        }, 0);
 
         if (pin.handle != null) {
             try al.append(allocator, ([_][:0]const u8{ "Handle:", pin.handle.? })[0..].*);
         }
         try al.append(allocator, ([_][:0]const u8{ "Coords:", pin_coords_str })[0..].*);
         if (p.get(p.pref.overlay_pindetails_expanded).b) {
-            try al.append(allocator, ([_][:0]const u8{ try std.fmt.allocPrintZ(
+            try al.append(allocator, ([_][:0]const u8{ try std.fmt.allocPrintSentinel(
                 arena.allocator(),
                 "Group {d}:",
                 .{mepo.pin_group_active},
-            ), try std.fmt.allocPrintZ(
+                0,
+            ), try std.fmt.allocPrintSentinel(
                 arena.allocator(),
                 "{d} of {d} ",
                 .{
                     mepo.pin_group_active_item.? + 1,
                     mepo.pin_groups[mepo.pin_group_active].items.len,
                 },
+                0,
             ) })[0..].*);
             try al.append(allocator, ([_][:0]const u8{ "Dist:", distance_str })[0..].*);
             for (pin.metadata.keys()) |k| {
-                const duped = try std.fmt.allocPrintZ(arena.allocator(), "{s}", .{k});
+                const duped = try std.fmt.allocPrintSentinel(arena.allocator(), "{s}", .{k}, 0);
                 try al.append(allocator, ([_][:0]const u8{ duped, pin.metadata.get(k).? })[0..].*);
             }
         }
@@ -645,7 +647,7 @@ fn blit_multiline_text(
     comptime fmt_string: [:0]const u8,
     args: anytype,
 ) !void {
-    const msg = try std.fmt.allocPrintZ(mepo.allocator, fmt_string, args);
+    const msg = try std.fmt.allocPrintSentinel(mepo.allocator, fmt_string, args, 0);
     defer mepo.allocator.free(msg);
 
     const font_size = font_size: {
@@ -870,7 +872,7 @@ pub fn blit(mepo: *Mepo) !void {
     // specified config frequency
     if (sdl.SDL_GetTicks() > mepo.title_update_ms + config.TitleUpdateFrequencyMs) {
         mepo.title_update_ms = sdl.SDL_GetTicks();
-        const title = try std.fmt.allocPrintZ(mepo.allocator, "mepo - {d:.5} lat, {d:.5} lon", .{ p.get(p.pref.lat).f, p.get(p.pref.lon).f });
+        const title = try std.fmt.allocPrintSentinel(mepo.allocator, "mepo - {d:.5} lat, {d:.5} lon", .{ p.get(p.pref.lat).f, p.get(p.pref.lon).f }, 0);
         defer mepo.allocator.free(title);
         _ = sdl.SDL_SetWindowTitle(mepo.window, &title[0]);
     }
diff --git a/src/util/utilfile.zig b/src/util/utilfile.zig
index d0656e9..0c85e71 100644
--- a/src/util/utilfile.zig
+++ b/src/util/utilfile.zig
@@ -31,7 +31,7 @@ pub fn wordexp_filepath(allocator: std.mem.Allocator, path: []const u8) ![:0]con
     }) |default_mapping| {
         if (std.posix.getenv(default_mapping.env_var) != null) continue;
         if (std.posix.getenv("HOME")) |home_dir| {
-            const value = try std.fmt.allocPrintZ(allocator, "{s}/{s}", .{ home_dir, default_mapping.default_home_path });
+            const value = try std.fmt.allocPrintSentinel(allocator, "{s}/{s}", .{ home_dir, default_mapping.default_home_path }, 0);
             defer allocator.free(value);
             _ = cstdlib.setenv(&default_mapping.env_var[0], &value[0], 1);
         }
@@ -43,7 +43,7 @@ pub fn wordexp_filepath(allocator: std.mem.Allocator, path: []const u8) ![:0]con
     if (wordexp.wordexp(&path[0], &expansion, 0) != 0) {
         return error.CacheDirExpansionFail;
     } else {
-        return try std.fmt.allocPrintZ(allocator, "{s}", .{expansion.we_wordv[0]});
+        return try std.fmt.allocPrintSentinel(allocator, "{s}", .{expansion.we_wordv[0]}, 0);
     }
 }
 
diff --git a/src/util/utilprocess.zig b/src/util/utilprocess.zig
index 4e73504..b64accb 100644
--- a/src/util/utilprocess.zig
+++ b/src/util/utilprocess.zig
@@ -56,7 +56,7 @@ pub fn run_subprocess(
     const args = [_:null]?[*:0]u8{
         (try arena.allocator().dupeZ(u8, "sh")).ptr,
         (try arena.allocator().dupeZ(u8, "-c")).ptr,
-        (try std.fmt.allocPrintZ(arena.allocator(), "exec {s}", .{cmd})).ptr,
+        (try std.fmt.allocPrintSentinel(arena.allocator(), "exec {s}", .{cmd}, 0)).ptr,
     };
     const env_vars = try std.process.createEnvironFromMap(arena.allocator(), env_map, .{});
     if (c.posix_spawnp(&pid, "sh", &actions, &attr, &args, env_vars.ptr) != 0)
