--- a/drivers/watchdog/w83627hf_wdt.c
+++ b/drivers/watchdog/w83627hf_wdt.c
@@ -70,6 +70,21 @@ static int cr_wdt_csr;		/* WDT control & status register */
 static int wdt_cfg_enter = 0x87;/* key to unlock configuration space */
 static int wdt_cfg_leave = 0xAA;/* key to lock configuration space */
 
+/*
+ * Add a fallback for non-GNU libc systems like musl libc for the
+ * non-standard function outb_p.
+ */
+#if defined(__GLIBC__)
+#define w83627hf_wdt_outb_p outb_p
+#else
+static inline void
+w83627hf_wdt_outb_p(unsigned char value, unsigned short int port)
+{
+	__asm__ __volatile__ ("outb %b0,%w1\noutb %%al,$0x80" : : "a" (value),
+			      "Nd" (port));
+}
+#endif
+
 static void superio_outb(int reg, int val)
 {
 	outb(reg, WDT_EFER);
@@ -84,8 +99,8 @@ static inline int superio_inb(int reg)
 
 static void superio_enter(void)
 {
-	outb_p(wdt_cfg_enter, WDT_EFER); /* Enter extended function mode */
-	outb_p(wdt_cfg_enter, WDT_EFER); /* Again according to manual */
+	w83627hf_wdt_outb_p(wdt_cfg_enter, WDT_EFER); /* Enter extended function mode */
+	w83627hf_wdt_outb_p(wdt_cfg_enter, WDT_EFER); /* Again according to manual */
 }
 
 static void superio_select(int ld)
@@ -95,7 +110,7 @@ static void superio_select(int ld)
 
 static void superio_exit(void)
 {
-	outb_p(wdt_cfg_leave, WDT_EFER); /* Leave extended function mode */
+	w83627hf_wdt_outb_p(wdt_cfg_leave, WDT_EFER); /* Leave extended function mode */
 }
 
 static int wdt_find(int addr)
