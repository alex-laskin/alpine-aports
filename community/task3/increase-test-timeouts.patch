diff -ruN a/test/basetest/task.py b/test/basetest/task.py
--- a/test/basetest/task.py	2025-10-21 01:37:09.000000000 +0000
+++ b/test/basetest/task.py	2025-10-23 21:32:51.580000000 +0000
@@ -152,7 +152,7 @@
 
         return args
 
-    def runSuccess(self, args="", input=None, merge_streams=False, timeout=5):
+    def runSuccess(self, args="", input=None, merge_streams=False, timeout=60):
         """Invoke task with given arguments and fail if exit code != 0
 
         Use runError if you want exit_code to be tested automatically and
@@ -185,7 +185,7 @@
 
         return output
 
-    def runError(self, args=(), input=None, merge_streams=False, timeout=5):
+    def runError(self, args=(), input=None, merge_streams=False, timeout=60):
         """Invoke task with given arguments and fail if exit code == 0
 
         Use runSuccess if you want exit_code to be tested automatically and
diff -ruN a/test/basetest/utils.py b/test/basetest/utils.py
--- a/test/basetest/utils.py	2025-10-21 01:37:09.000000000 +0000
+++ b/test/basetest/utils.py	2025-10-23 21:33:10.720000000 +0000
@@ -68,12 +68,12 @@
         return os.path.join(BIN_PREFIX, cmd)
 
 
-def wait_condition(cond, timeout=10, sleeptime=0.01):
+def wait_condition(cond, timeout=60, sleeptime=0.01):
     """Wait for condition to return anything other than None"""
     # NOTE Increasing sleeptime can dramatically increase testsuite runtime
     # It also reduces CPU load significantly
     if timeout is None:
-        timeout = 10
+        timeout = 60
 
     if timeout < sleeptime:
         print("Warning, timeout cannot be smaller than", sleeptime)
