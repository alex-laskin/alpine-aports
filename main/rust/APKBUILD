# Contributor: Rasmus Thomsen <oss@cogitri.dev>
# Contributor: Jakub Jirutka <jakub@jirutka.cz>
# Contributor: Shiz <hi@shiz.me>
# Contributor: Jeizsm <jeizsm@gmail.com>
# Contributor: Ariadne Conill <ariadne@dereferenced.org>
# Contributor: Celeste <cielesti@protonmail.com>
# Contributor: omni <omni+alpine@hack.org>
# Maintainer: team/rust <alpine@ptrcnull.me>
pkgname=rust
pkgver=1.90.0
_llvmver=21
_bootver=1.89.0
_change_id=144675
pkgrel=1
# Source tarballs for beta releases are listed here:
# https://static.rust-lang.org/dist/channel-rust-beta.toml
pkgdesc="Rust Programming Language toolchain"
url="https://www.rust-lang.org/"
arch="all"
license="Apache-2.0 OR MIT"

# 'cc' is needed at runtime just for linking. Someday rustc might invoke
# the linker directly, and then we'll only need 'ld'.
# See: https://github.com/rust-lang/rust/issues/11937
depends="gcc musl-dev"

# * Rust is self-hosted, so you need rustc (and cargo) to build rustc...
#   The last revision of this abuild that does not depend on itself (uses
#   prebuilt rustc and cargo) is 2e6769eb39eaff3029d8298fc02856623c563cd8.
# * Don't add libgit2-dev into make dependencies. There's no compatibility
#   guarantees between libgit2-sys and arbitrary system libgit2 versions;
#   when system libgit2 is upgraded to a new minor version, it may break
#   cargo and since we need cargo to rebuild cargo... this already happened
#   several times. For this reason we build cargo with vendored libgit2.
makedepends_host="
	!libgit2-dev
	curl-dev
	libssh2-dev
	llvm$_llvmver-dev
	openssl-dev
	zlib-dev
	"
makedepends_build="
	$makedepends_host
	cargo-bootstrap>=$_bootver
	clang$_llvmver
	file
	llvm$_llvmver-test-utils
	python3
	rust-bootstrap>=$_bootver
	tar
	xz-dev
	"

# XXX: This is a hack to allow this abuild to depend on itself. Adding "rust"
# to makedepends would not work, because abuild implicitly removes $pkgname
# and $subpackages from the abuild's dependencies.
provides="rust-bootstrap=$pkgver-r$pkgrel"
# !archcheck: needed for -src that contains some testing binaries.
# net: crates from crate.io
options="!archcheck net"

case "$CARCH" in
arm*)
	# +crt-static still broken here, last checked with rust 1.82.0
	options="$options !check"
	;;
*)
	;;
esac

# Only cargo is needed for bootstrapping.
subpackages="cargo"
if [ -z "$BOOTSTRAP" ]; then
	subpackages="
		$pkgname-dbg
		$subpackages
		$pkgname-doc
		$pkgname-clippy
		$pkgname-gdb::noarch
		$pkgname-lldb::noarch
		$pkgname-src::noarch
		$pkgname-wasm
		cargo-bash-completions:_cargo_bashcomp:noarch
		cargo-zsh-completion:_cargo_zshcomp:noarch
		cargo-doc:_cargo_doc:noarch
		rustc-dev:_rustc_dev
		rustfmt
		"
	case "$CHOST" in
		aarch64*|x86_64*)
		subpackages="$subpackages $pkgname-uefi"
		;;
	esac
	makedepends_build="
		$makedepends_build
		wasi-libc
		patchelf
		"
	makedepends_host="
		$makedepends_host
		scudo-malloc
		"
fi
source="https://static.rust-lang.org/dist/rustc-$pkgver-src.tar.xz
	alpine-move-py-scripts-to-share.patch
	alpine-target.patch
	do-not-install-libunwind-source.patch
	gcc-eh-libunwind.patch
	install-template-shebang.patch
	need-rpath.patch
	need-ssp_nonshared.patch
	no-export-ld-library-path.patch
	system-wasm-ld.patch
	system-uefi-ld.patch
	check-rustc
	"
builddir="$srcdir/rustc-$pkgver-src"

# secfixes:
#   1.71.1-r0:
#     - CVE-2023-38497
#   1.66.1-r0:
#     - CVE-2022-46176
#   1.56.1-r0:
#     - CVE-2021-42574
#   1.52.1-r1:
#     - CVE-2021-29922
#   1.51.0-r2:
#     - CVE-2020-36323
#     - CVE-2021-31162
#   1.34.2-r0:
#     - CVE-2019-12083
#   1.26.0-r0:
#     - CVE-2019-16760

# We have to add new architectures in multiple steps:
# 1. Compile with the upstream triplets, compiling alpine's triplets in
# 2. Compile again, now with our triplets selected as build/target, now that
#    rustc knows about them
_build="$CBUILD"
_target="$CHOST"

_rlibdir="usr/lib/rustlib/$_target/lib"
_sharedir="usr/share/rust"

ldpath="/$_rlibdir"

export OPENSSL_NO_VENDOR=1
export RUST_BACKTRACE=1

export gztool="$(command -v pigz || echo gzip)"

# this is useful for when we have to patch vendored projects
_clear_vendor_checksums() {
	sed -i 's/\("files":{\)[^}]*/\1/' vendor/$1/.cargo-checksum.json
}

_unpack_build_dist() {
	local distname="$1" destdir="$2" tarball=

	case "$distname" in
	rust-src)
		tarball="$builddir"/build/dist/rust-src-$pkgver.tar.gz
		;;
	rust-std-*)
		tarball="$builddir"/build/dist/rust-std-$pkgver-${distname#rust-std-*}.tar.gz
		;;
	*)
		tarball="$builddir"/build/dist/$distname-$pkgver-$_target.tar.gz
		;;
	esac

	tar -I "$gztool -d" -xf "$tarball" \
		-C "$destdir" --strip-components=2 \
		--exclude=manifest.in --no-same-owner
}

build() {
	local extra_conf_opts=

	export PATH="/usr/lib/llvm$_llvmver/bin:$PATH"
	export CFLAGS="$CFLAGS -O2"
	export CXXFLAGS="$CXXFLAGS -O2"
	export WASI_SDK_PATH=/usr

	if [ "$_build" != "$_target" ]; then
		# Use variables with triplets since they are otherwise passed to the wrong targets
		export "PKG_CONFIG_SYSROOT_DIR_${_target//-/_}=$PKG_CONFIG_SYSROOT_DIR"
		export "PKG_CONFIG_PATH_${_target//-/_}=$PKG_CONFIG_PATH"
		export "CFLAGS_${_target//-/_}=$CFLAGS"
		export "CXXFLAGS_${_target//-/_}=$CXXFLAGS"
		export "CFLAGS_${_build//-/_}=$BUILDCFLAGS -O2"
		export "CXXFLAGS_${_build//-/_}=$BUILDCXXFLAGS -O2"
		unset RUSTFLAGS CC CXX CFLAGS CXXFLAGS PKG_CONFIG_SYSROOT_DIR PKG_CONFIG_PATH

		# Cross compiling is just a hack, make the hack work with alpine
		# https://github.com/rust-lang/rust/blob/f19142044f270760ce0ebc03b2c3a44217d8703d/compiler/rustc_llvm/build.rs#L327
		cat << EOF > llvm-config
#!/bin/sh -e
for i; do
	case "\$i" in
		--ldflags) printf '-L%s/usr/lib/llvm$_llvmver/lib\n' "\$CBUILDROOT"; exit ;;
		--libdir) printf '%s/usr/lib/llvm$_llvmver/lib\n' "\$CBUILDROOT"; exit ;;
		--bindir) printf '%s/usr/lib/llvm$_llvmver/bin\n' "\$CBUILDROOT"; exit ;;
		# Enabled targets vary between arches
		--components) printf '%s\n' 'ipo bitreader bitwriter linker asmparser lto coverage instrumentation $(
			sed -n 's/^set(LLVM_TARGETS_TO_BUILD \(.*\))$/\1/p' "$CBUILDROOT/usr/lib/llvm$_llvmver/lib/cmake/llvm/LLVMConfig.cmake" | tr 'A-Z;' 'a-z '
		)'; exit ;;
	esac
done
exec llvm-config "\$@"
EOF
		chmod +x llvm-config
	fi
	if [ "$pkgver" = "$_bootver" ]; then
		# Skip stage0 when `rust-bootstrap` is of the
		# same version as the Rust we are building.
		extra_conf_opts="$extra_conf_opts --set=build.local-rebuild=true"
	fi

	local tools="cargo"
	if [ -z "$BOOTSTRAP" ]; then
		tools="$tools,clippy,src,rustdoc,rustfmt,rust-demangler"
		case "$CARCH" in
		aarch64|ppc64le|x86_64|loongarch64)
			# this doesn't build on s390x, but since it's only useful with rust-analyzer,
			# and we enable it on these arches only, just do that
			tools="$tools,rust-analyzer-proc-macro-srv"
			;;
		esac

		# Skip LTO to allow for faster bootstrapping.
		case "$CARCH" in
		riscv64|s390x|arm*)
			;;
		*)
			extra_conf_opts="$extra_conf_opts --set=rust.lto=thin"
			;;
		esac
	fi

	# absolutely do not set these here, rust "knows" what it's doing
	unset CARGO_PROFILE_RELEASE_LTO
	unset CARGO_PROFILE_RELEASE_OPT_LEVEL
	unset CARGO_PROFILE_RELEASE_PANIC
	unset CARGO_PROFILE_RELEASE_CODEGEN_UNITS

	local targets="$_target"
	if subpackage_types_has wasm; then
		targets="$targets,wasm32-unknown-unknown"
		extra_conf_opts="$extra_conf_opts
			--set=target.wasm32-unknown-unknown.sanitizers=false
			--set=target.wasm32-unknown-unknown.profiler=false
			--set=target.wasm32-unknown-unknown.linker=lld
			"

		for t in wasm32-wasip1 wasm32-wasip1-threads wasm32-wasip2; do
			targets="$targets,$t"
			extra_conf_opts="$extra_conf_opts
				--set=target.$t.sanitizers=false
				--set=target.$t.profiler=false
				--set=target.$t.wasi-root=/usr/share/wasi-sysroot
				--set=target.$t.cc=clang-$_llvmver
				--set=target.$t.cxx=clang++-$_llvmver
				--set=target.$t.ar=llvm$_llvmver-ar
				--set=target.$t.ranlib=llvm$_llvmver-ranlib
				"
		done
	fi
	local _uefi_target=${CHOST%%-*}-unknown-uefi
	if subpackage_types_has uefi; then
		targets="$targets,$_uefi_target"
		# Too many jobs uses too much memory and fails with OOM error.
		# This compounds when building this extra target.
		cores=$(nproc)
		JOBS=$((cores / 3 + 1))
	fi

	# ./configure will not run when bootstrap.toml exists,
	# so assume we are restarting the build with ./x.py
	[ -f "bootstrap.toml" ] || ./configure \
		--build="$_build" \
		--host="$_target" \
		--target="$targets" \
		--prefix="/usr" \
		--release-channel="stable" \
		--enable-local-rust \
		--disable-docs \
		--enable-extended \
		--tools="$tools" \
		--enable-llvm-link-shared \
		--enable-option-checking \
		--enable-locked-deps \
		--enable-profiler \
		--enable-vendor \
		--dist-compression-formats=gz \
		--python="python3" \
		--set="change-id=$_change_id" \
		--set="build.description=Alpine Linux $pkgver-r$pkgrel" \
		--set="rust.musl-root=/usr" \
		--set="rust.backtrace-on-ice=true" \
		--set="rust.codegen-units=1" \
		--set="rust.codegen-units-std=1" \
		--set="rust.deny-warnings=false" \
		--set="rust.remap-debuginfo=true" \
		--set="rust.lld=false" \
		--set="rust.incremental=$([ -n "$BOOTSTRAP" ] && echo true || echo false)" \
		--set="target.$_target.llvm-config=$builddir/llvm-config" \
		--set="target.$_target.musl-root=$CBUILDROOT/usr" \
		--set="target.$_target.crt-static=false" \
		--set="target.$_target.cc=${CROSS_COMPILE}cc" \
		--set="target.$_target.cxx=${CROSS_COMPILE}c++" \
		--set="target.$_target.ar=${CROSS_COMPILE}ar" \
		--set="target.$_target.linker=${CROSS_COMPILE}cc" \
		--set="target.$_uefi_target.crt-static=true" \
		--set="target.$_uefi_target.cc=clang-$_llvmver" \
		--set="target.$_uefi_target.profiler=false" \
		--set="target.$_uefi_target.optimized-compiler-builtins=false" \
		--set="target.$_build.llvm-config=$(command -v llvm-config)" \
		--set="target.$_build.musl-root=/usr" \
		--set="target.$_build.crt-static=false" \
		--set="target.$_build.cc=cc" \
		--set="target.$_build.cxx=c++" \
		--set="target.$_build.ar=ar" \
		--set="target.$_build.linker=cc" \
		$extra_conf_opts

	python3 ./x.py dist --jobs ${JOBS:-2} ${BOOTSTRAP:+cargo rustc rust-std}
}

check() {
	# At this moment lib/rustlib/$CHOST/lib does not contain a complete
	# copy of the .so libs from lib (they will be copied there during
	# 'x.py install'). Thus we must set LD_LIBRARY_PATH for tests to work.

	msg "Setting up test env..."

	mkdir -p "$builddir/test-rustc"

	_unpack_build_dist rustc "$builddir/test-rustc" &
	_unpack_build_dist rust-std "$builddir/test-rustc" &
	wait

	export LD_LIBRARY_PATH="$builddir/test-rustc/lib/rustlib/$CHOST/lib"

	msg "Sanity checks..."
	"$srcdir"/check-rustc "$builddir"/test-rustc/bin/rustc

	# XXX: There's some problem with these tests, we will figure it out later.
	#	make check \
	#		LD_LIBRARY_PATH="$_stage0dir/lib" \
	#		VERBOSE=1

	# these rebuild the whole compiler which takes a long time
	# msg "Running tests for cargo..."
	# CFG_DISABLE_CROSS_TESTS=1 python3 ./x.py test --no-fail-fast src/tools/cargo

	unset LD_LIBRARY_PATH
}

package() {
	# merged into main package
	provides="$provides rust-stdlib=$pkgver-r$pkgrel"
	replaces="rust-stdlib"

	mkdir -p "$pkgdir/usr"

	cd "$pkgdir"

	_unpack_build_dist rustc "$pkgdir/usr" &
	_unpack_build_dist rust-std "$pkgdir/usr" &
	_unpack_build_dist cargo "$pkgdir/usr" &
	wait

	if [ -n "$BOOTSTRAP" ]; then
		# Only keep files needed to compile the full rust package
		rm -r usr/bin/rust-gdb* usr/share usr/etc usr/lib/rustlib/etc
		return 0
	fi

	_unpack_build_dist rustc-dev "$pkgdir/usr" &
	_unpack_build_dist rust-src "$pkgdir/usr" &
	wait
	_unpack_build_dist clippy "$pkgdir/usr" &
	_unpack_build_dist rustfmt "$pkgdir/usr" &
	if subpackage_types_has wasm; then
		_unpack_build_dist rust-std-wasm32-unknown-unknown "$pkgdir/usr" &
		_unpack_build_dist rust-std-wasm32-wasip1 "$pkgdir/usr" &
		_unpack_build_dist rust-std-wasm32-wasip1-threads "$pkgdir/usr" &
		_unpack_build_dist rust-std-wasm32-wasip2 "$pkgdir/usr" &
	fi
	if subpackage_types_has uefi; then
		_unpack_build_dist rust-std-${_target%%-*}-unknown-uefi "$pkgdir/usr" &
	fi
	wait

	# Prevent rustc-dev from providing the same *.so files,
	# which causes it to conflict with the main rust package.
	local libpath; for libpath in usr/lib/*.so; do
		rm -v "$_rlibdir/${libpath##*/}"
		ln -sv "/$libpath" $_rlibdir/
	done

	# We don't want to include stuff like rust-llvm-* tools, as we will use the
	# system tools.
	rm -f usr/lib/rustlib/"$_target"/bin/rust-llvm-*

	# Python scripts are noarch, so move them to /usr/share.
	# Requires move-py-scripts-to-share.patch to be applied.
	_mv usr/lib/rustlib/etc/*.py $_sharedir/etc/
	rmdir -p usr/lib/rustlib/etc 2>/dev/null || true

	_mv usr/etc/bash_completion.d/cargo usr/share/bash-completion/completions/
	rmdir -p usr/etc/bash_completion.d 2>/dev/null || true

	_mv usr/lib/rustlib/src/rust usr/src/
	ln -s ../../../src/rust usr/lib/rustlib/src/rust
	mv usr/lib/rustlib/rustc-src/rust usr/src/rustc
	ln -s ../../../src/rustc usr/lib/rustlib/rustc-src/rust

	# Remove some clutter.
	cd "$pkgdir"/usr/lib/rustlib
	rm -f components install.log manifest-* rust-installer-version uninstall.sh
	if [ "$_build" != "$_target" ]; then
		rm -rf "$pkgdir"/usr/lib/rustlib/$_build
	fi

	# for some reason the tar archive gets some root-only files for rlibs
	find "$pkgdir"/usr/lib/rustlib -type f -perm -600 -exec chmod 0644 {} \+
	find "$pkgdir"/usr/lib/rustlib -type f -perm -700 -exec chmod 0755 {} \+

	# link scudo to tools by default on architectures where it works well
	# this is roughly 20+% faster with no downside except slightly higher
	# memory use, but this is a compiler that already uses a ton of memory
	case "$CARCH" in
	arm*) ;;
	*)
		patchelf --add-needed libscudo.so \
			"$pkgdir"/usr/bin/cargo \
			"$pkgdir"/usr/bin/rustc \
			"$pkgdir"/usr/bin/rustdoc
		;;
	esac
}

_rustc_dev() {
	pkgdesc="$pkgdesc (compiler libraries)"

	amove $_rlibdir/lib*.rmeta \
		$_rlibdir/lib*.so
}

wasm() {
	pkgdesc="WebAssembly targets for rust"
	depends="rust=$pkgver-r$pkgrel lld wasi-libc"

	amove usr/lib/rustlib/wasm32-*
}

uefi() {
	pkgdesc="UEFI targets for rust"
	depends="rust=$pkgver-r$pkgrel lld"

	amove usr/lib/rustlib/*-uefi
}

analysis() {
	pkgdesc="Compiler analysis data for the Rust standard library"
	depends="$pkgname=$pkgver-r$pkgrel"

	amove $_rlibdir/../analysis
}

gdb() {
	pkgdesc="GDB pretty printers for Rust"
	depends="$pkgname=$pkgver-r$pkgrel gdb"

	amove usr/bin/rust-gdb*
	amove $_sharedir/etc/gdb_*.py
}

lldb() {
	pkgdesc="LLDB pretty printers for Rust"
	depends="$pkgname=$pkgver-r$pkgrel lldb py3-lldb"

	amove usr/bin/rust-lldb
	amove $_sharedir/etc/lldb_*.py
	amove usr/lib/rustlib/etc/lldb_commands
}

clippy() {
	pkgdesc="Lints to catch common mistakes and improve your Rust code"
	depends="$pkgname=$pkgver-r$pkgrel"

	amove usr/bin/cargo-clippy
	amove usr/bin/clippy-driver
}

src() {
	pkgdesc="$pkgdesc (source code)"
	depends="$pkgname=$pkgver-r$pkgrel"
	license="($license) AND OFL-1.1 AND GPL-3.0-or-later AND GPL-3.0-with-GCC-exception AND CC-BY-SA-3.0 LGPL-3.0"

	amove usr/src \
		usr/lib/rustlib/src \
		usr/lib/rustlib/rustc-src
}

cargo() {
	pkgdesc="The Rust package manager"
	license="(Apache-2.0 OR MIT) AND UNLICENSE"
	depends="$pkgname=$pkgver-r$pkgrel"
	# XXX: See comment on top-level provides=.
	provides="cargo-bootstrap=$pkgver-r$pkgrel"

	amove usr/bin/cargo
}

rustfmt() {
	pkgdesc="Rust Code Formatter"
	license="Apache-2.0"
	depends="cargo=$pkgver-r$pkgrel"

	amove usr/bin/rustfmt
	amove usr/bin/cargo-fmt
}

_cargo_bashcomp() {
	default_bashcomp

	pkgdesc="Bash completions for cargo"
	install_if="cargo=$pkgver-r$pkgrel bash-completion"
}

_cargo_zshcomp() {
	default_zshcomp

	pkgdesc="ZSH completions for cargo"
	install_if="cargo=$pkgver-r$pkgrel zsh"
}

_cargo_doc() {
	pkgdesc="The Rust package manager (documentation)"
	install_if="docs cargo=$pkgver-r$pkgrel"

	# XXX: This is hackish!
	cd "$pkgdir"/../$pkgname-doc
	_mv usr/share/man/man1/cargo* "$subpkgdir"/usr/share/man/man1/
}

_mv() {
	local dest; for dest; do true; done  # get last argument
	mkdir -p "$dest"
	mv "$@"
}

sha512sums="
fb0798b4c7450754db2fcbb641202909d209c6db2d9181d7df7282217b8320dc52f5e9853de9d7bdb79177f1f920389450cab07674dea5fb5501eaab5816662a  rustc-1.90.0-src.tar.xz
2ada7d1ba46fb46b6337e1b2e098de6d39ab1b4aadc46262136bfc8ace3c47c3a488e02221b32526ba307ea799aebe50d53f9c255e85f1dc77c6316414f3ca2a  alpine-move-py-scripts-to-share.patch
48d5159ae84323fdb3fdcf80c701705a53876868042cf2becba12bcf0231825562b13671fc3f8628adba37d6a3c4a9644e29bfe81b5e2e59ec0d4a2ef2370d13  alpine-target.patch
154c82c75a37c610b20231e13e1b61ded800d2c026805ec94723e018c7934c79661faae1f827adf0305bcd7fc84d2e3c2a97bd46659130a702913fb3b1ac39cd  do-not-install-libunwind-source.patch
ed434a60a1d1e4c73718d44f81b871da7daaeef484a23061bb3f5d1d302cb9aaf641451584b8b24b71e7b379c332880ee646b53b5ac74d20df2d2c214144ce92  gcc-eh-libunwind.patch
c29a13d5a4bd3d78bbe46dd8898018997e09325e80b7f2ae17f68a803625696610f9ccd90e11955f020bef8f414bc7bcb2a0bc78363b6085b9f839b742038d5a  install-template-shebang.patch
70ae2a84704c0329014889948520cb6562349ab8894caa13e80cdd766ef071a017649b5f0983aade50b97fc235f37010c2a9399dc55500aa0176366f82bc938d  need-rpath.patch
ed79be7188505f6706d868ae9dfbf97b61d9fd014a97db1664a85dc4538684bdfe252060d4b71d834fc43672b4f1e0d6406a121a40df8425ac7e074d32bd62ca  need-ssp_nonshared.patch
946cf1978a7dd225ad0468d96912c5e585ae6cb7bcc2fb2ee228965517d6581afc303dafce80c06a62250823f37fd5c8d2dbc5927bfac650a4da16bf90415dc2  no-export-ld-library-path.patch
8f70ba0198196f7efda2cbe64a6cdbc3ca10ef274f4c96ef55ff919d7cc6cd704e9fa0c4f7b4198b483b3e367b477792cf95b5d85e8edfd7df995360b08a5d5c  system-wasm-ld.patch
da77cfcfe3cffc338113ddc4fc8d5017889ec7f85955c27f9139f55589b925277ffcf2165bcbc9ca32da9250c76f6d134c8eb8d3adc8ab185ac8852071bcf450  system-uefi-ld.patch
c31fdfe8a9b3411576c75da46645cf0465b9053000a2ab49cf9b2f2733f679d6d33acbf236d67a20e14935d094a685453b7f1840180249f39d610fd0902c3125  check-rustc
"
