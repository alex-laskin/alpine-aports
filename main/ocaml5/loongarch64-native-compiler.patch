--- a/Makefile
+++ b/Makefile
@@ -31,7 +31,7 @@ include stdlib/StdlibModules
 
 CAMLC = $(BOOT_OCAMLC) $(BOOT_STDLIBFLAGS) -use-prims runtime/primitives
 CAMLOPT=$(OCAMLRUN) ./ocamlopt$(EXE) $(STDLIBFLAGS) -I otherlibs/dynlink
-ARCHES=amd64 arm64 power s390x riscv
+ARCHES=amd64 arm64 loongarch64 power s390x riscv
 VPATH = utils parsing typing bytecomp file_formats lambda middle_end \
   middle_end/closure middle_end/flambda middle_end/flambda/base_types \
   asmcomp driver toplevel tools runtime \
--- a/configure.ac
+++ b/configure.ac
@@ -1487,7 +1487,8 @@ AS_IF([test x"$supports_shared_libraries" = 'xtrue'],
     [aarch64-*-netbsd*], [natdynlink=true],
     [riscv*-*-linux*], [natdynlink=true],
     [[i[3456]86-*-gnu*]], [natdynlink=true],
-    [x86_64-*-gnu*], [natdynlink=true])])
+    [x86_64-*-gnu*], [natdynlink=true],
+    [loongarch*-*-linux*], [natdynlink=true])])
 
 # Try to work around the Skylake/Kaby Lake processor bug.
 AS_CASE(["$ocaml_cc_vendor,$target"],
@@ -1608,6 +1609,8 @@ AS_CASE([$target],
     [has_native_backend=yes; arch=amd64; system=cygwin],
   [riscv64-*-linux*],
     [has_native_backend=yes; arch=riscv; model=riscv64; system=linux],
+  [loongarch64-*-linux*],
+    [has_native_backend=yes; arch=loongarch64; system=linux],
   [x86_64-*-gnu*],
     [has_native_backend=yes; arch=amd64; system=gnu]
 )
@@ -1734,7 +1737,7 @@ default_aspp="$CC -c"
 AS_CASE([$as_target,$ocaml_cc_vendor],
   [*-*-linux*,gcc-*],
     [AS_CASE([$as_cpu],
-      [x86_64|arm*|aarch64*|i[[3-6]]86|riscv*],
+      [x86_64|arm*|aarch64*|i[[3-6]]86|riscv*|loongarch*],
         [default_as="${toolpref}as"])],
   [i686-pc-windows,*],
     [default_as="ml -nologo -coff -Cp -c -Fo"
--- a/runtime/caml/config.h
+++ b/runtime/caml/config.h
@@ -257,7 +257,7 @@ typedef uint64_t uintnat;
    #define Cache_line_bsize 256
 #elif defined(TARGET_arm64) || defined(TARGET_power)
    #define Cache_line_bsize 128
-#elif defined(TARGET_amd64) || defined(TARGET_riscv)
+#elif defined(TARGET_amd64) || defined(TARGET_riscv) || defined(TARGET_loongarch64)
    #define Cache_line_bsize 64
 #elif (!defined(NATIVE_CODE))
    #define Cache_line_bsize 64
--- a/runtime/caml/stack.h
+++ b/runtime/caml/stack.h
@@ -94,6 +94,16 @@
 #define Stack_header_size 32
 #endif
 
+#ifdef TARGET_loongarch64
+/* Size of the gc_regs structure, in words.
+   See loongarch64.S and loongarch64/proc.ml for the indices */
+#define Wosize_gc_regs (2 + 23 /* int regs */ + 24 /* float regs */)
+#define Saved_return_address(sp) *((intnat *)((sp) - 8))
+#define First_frame(sp) ((sp) + 16)
+#define Saved_gc_regs(sp) (*(value **)((sp) + 24))
+#define Stack_header_size 32
+#endif
+
 /* Declaration of variables used in the asm code */
 extern value * caml_globals[];
 extern intnat caml_globals_inited;
