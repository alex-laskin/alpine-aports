--- a/format.c
+++ b/format.c
@@ -93,6 +93,7 @@
 #include <string.h>
 #include <sys/types.h>
 #include <time.h>
+#include <math.h>
 #include "sc.h"
 
 #define bool	int
@@ -501,7 +502,7 @@ engformat(int fmt, int width, int lprecision, double val, char *buf, int buflen)
 	"+03", "+06", "+09", "+12", "+15", "+18"
     };
     int engind = 0;
-    double engmant, pow(), engabs, engexp;
+    double engmant, engabs, engexp;
 
     if (buflen < width) return (false);
     if (fmt >= 0 && fmt < COLFORMATS && colformat[fmt])
--- a/help.c
+++ b/help.c
@@ -7,6 +7,7 @@
 
 #ifdef QREF
 #include <stdio.h>
+#include <stdlib.h>
 char	*header = " Quick Reference";
 char	*revision = "$Revision: 7.16 $";
 #else
--- a/interp.c
+++ b/interp.c
@@ -59,9 +59,9 @@ char *regex();
 #endif
 
 #ifdef SIGVOID
-    void doquit();
+    void doquit(int);
 #else
-    int doquit();
+    int doquit(int);
 #endif
 
 /* Use this structure to save the last 'g' command */
@@ -93,8 +93,8 @@ struct enode *freeenodes = NULL;
 
 double	dolookup(struct enode * val, int minr, int minc, int maxr,
 	int maxc, int offr, int offc);
-double	fn1_eval(double (*fn)(), double arg);
-double	fn2_eval(double (*fn)(), double arg1, double arg2);
+double	fn1_eval(double (*fn)(double), double arg);
+double	fn2_eval(double (*fn)(double, double), double arg1, double arg2);
 int	RealEvalAll();
 int	constant(register struct enode *e);
 void	RealEvalOne(register struct ent *p, int i, int j, int *chgct);
@@ -972,7 +972,7 @@ void
 #else
 int
 #endif
-eval_fpe() /* Trap for FPE errors in eval */
+eval_fpe(int) /* Trap for FPE errors in eval */
 {
 #if defined(i386) && !defined(M_XENIX)
     asm("	fnclex");
@@ -991,7 +991,7 @@ eval_fpe() /* Trap for FPE errors in eval */
 }
 
 double
-fn1_eval(double (*fn)(), double arg)
+fn1_eval(double (*fn)(double), double arg)
 {
     double res;
     errno = 0;
@@ -1003,7 +1003,7 @@ fn1_eval(double (*fn)(), double arg)
 }
 
 double
-fn2_eval(double (*fn)(), double arg1, double arg2)
+fn2_eval(double (*fn)(double, double), double arg1, double arg2)
 {
     double res;
     errno = 0;
--- a/lex.c
+++ b/lex.c
@@ -200,9 +200,9 @@ yylex()
 	}
     } else if ((*p == '.') || isdigit(*p)) {
 #ifdef SIGVOID
-	void (*sig_save)();
+	void (*sig_save)(int);
 #else
-	int (*sig_save)();
+	int (*sig_save)(int);
 #endif
 	double v = 0.0;
 	int temp;
--- a/sc.c
+++ b/sc.c
@@ -84,8 +84,8 @@ int brokenpipe = FALSE;	/* Set to true if SIGPIPE is received */
 int	wasforw	= FALSE;
 #endif
 
-void		update();
-void		repaint();
+void		update(int);
+void		repaint(int, int, int);
 extern void	doshell();
 extern void	gohome();
 extern void	leftlimit();
@@ -2110,20 +2110,20 @@ void
 signals()
 {
 #ifdef SIGVOID
-    void doquit();
-    void time_out();
-    void dump_me();
-    void nopipe();
+    void doquit(int);
+    void time_out(int);
+    void dump_me(int);
+    void nopipe(int);
 #ifdef	SIGWINCH
-    void winchg();
+    void winchg(int);
 #endif
 #else
-    int doquit();
-    int time_out();
-    int dump_me();
-    int nopipe();
+    int doquit(int);
+    int time_out(int);
+    int dump_me(int);
+    int nopipe(int);
 #ifdef	SIGWINCH
-    int winchg();
+    int winchg(int);
 #endif
 #endif
 
@@ -2148,7 +2148,7 @@ void
 #else
 int
 #endif
-nopipe()
+nopipe(int)
 {
     brokenpipe = TRUE;
 }
@@ -2158,7 +2158,7 @@ void
 #else
 int
 #endif
-winchg()
+winchg(int)
 {
     stopdisp();
     startdisp();
@@ -2182,7 +2182,7 @@ void
 #else
 int
 #endif
-doquit()
+doquit(int)
 {
     if (usecurses) {
 	diesave();
@@ -2197,7 +2197,7 @@ void
 #else
 int
 #endif
-dump_me()
+dump_me(int)
 {
     if (usecurses)
 	diesave();
--- a/xmalloc.c
+++ b/xmalloc.c
@@ -10,11 +10,11 @@
 /* extern char	*malloc();
 extern char	*realloc();
 extern void	free(); */
-void		fatal();
+void		fatal(char *);
 
 #ifdef SYSV3
-extern void	free();
-extern void	exit();
+extern void	free(void *);
+extern void	exit(int);
 #endif
 
 #define	MAGIC	(double)1234567890.12344
