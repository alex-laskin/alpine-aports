From a0d717f34ab0620461854cf7180bbabf7acfe593 Mon Sep 17 00:00:00 2001
From: Nicolai Syvertsen <saivert@saivert.com>
Date: Sun, 19 Oct 2025 19:08:13 +0200
Subject: [PATCH] Experiment building against wp-0.5 branch of wireplumber-rs.

---
 Cargo.lock                             | 49 +++++++++++++++-----------
 Cargo.toml                             |  8 +++--
 README.md                              | 32 ++++++++++++++++-
 Release steps.txt                      | 12 +++++++
 build-aux/com.saivert.pwvucontrol.json |  6 ++--
 meson.build                            |  2 +-
 src/backend/manager.rs                 | 41 +++++++++++++--------
 src/macros.rs                          |  8 ++---
 src/main.rs                            |  5 +++
 9 files changed, 117 insertions(+), 46 deletions(-)
 create mode 100644 Release steps.txt

diff --git a/Cargo.lock b/Cargo.lock
index 296ff45..0f70a01 100644
--- a/Cargo.lock
+++ b/Cargo.lock
@@ -555,9 +555,9 @@ dependencies = [
 
 [[package]]
 name = "hashbrown"
-version = "0.15.2"
+version = "0.16.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "bf151400ff0baff5465007dd2f3e717f3fe502074ca563069ce3a6629d07b289"
+checksum = "5419bdc4f6a9207fbeba6d11b604d481addf78ecd10c11ad51e76c2f6482748d"
 
 [[package]]
 name = "heck"
@@ -589,9 +589,9 @@ dependencies = [
 
 [[package]]
 name = "indexmap"
-version = "2.8.0"
+version = "2.12.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "3954d50fe15b02142bf25d3b8bdadb634ec3948f103d04ffe3031bc8fe9d7058"
+checksum = "6717a8d2a5a929a1a2eb43a12812498ed141a0bcfb7e8f7844fbdbe4303bba9f"
 dependencies = [
  "equivalent",
  "hashbrown",
@@ -724,9 +724,9 @@ dependencies = [
 
 [[package]]
 name = "memchr"
-version = "2.7.4"
+version = "2.7.6"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "78ca9ab1a0babb1e7d5695e3530886289c18cf2f87ec19a575a0abdce112e3a3"
+checksum = "f52b00d39961fc5b2736ea853c9cc86238e165017a493d1d5c8eac6bdc4cc273"
 
 [[package]]
 name = "memoffset"
@@ -980,18 +980,27 @@ checksum = "56e6fa9c48d24d85fb3de5ad847117517440f6beceb7798af16b4a87d616b8d0"
 
 [[package]]
 name = "serde"
-version = "1.0.219"
+version = "1.0.228"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5f0e2c6ed6606019b4e29e69dbaba95b11854410e5347d525002456dbbb786b6"
+checksum = "9a8e94ea7f378bd32cbbd37198a4a91436180c5bb472411e48b5ec2e2124ae9e"
+dependencies = [
+ "serde_core",
+]
+
+[[package]]
+name = "serde_core"
+version = "1.0.228"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "41d385c7d4ca58e59fc732af25c3983b67ac852c1a25000afe1175de458b67ad"
 dependencies = [
  "serde_derive",
 ]
 
 [[package]]
 name = "serde_derive"
-version = "1.0.219"
+version = "1.0.228"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "5b0276cf7f2c73365f7157c8123c21cd9a50fbbd844757af28ca1f5925fc2a00"
+checksum = "d540f220d3187173da220f885ab66608367b6574e925011a9353e4badda91d79"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -1024,15 +1033,15 @@ dependencies = [
 
 [[package]]
 name = "smallvec"
-version = "1.14.0"
+version = "1.15.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "7fcf8323ef1faaee30a44a340193b1ac6814fd9b7b4e88e9d4519a3e4abe1cfd"
+checksum = "67b1b7a3b5fe4f1376887184045fcf45c69e92af734b7aaddc05fb777b6fbd03"
 
 [[package]]
 name = "syn"
-version = "2.0.100"
+version = "2.0.107"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "b09a44accad81e1ba1cd74a32461ba89dee89095ba17b32f5d03683b1b1fc2a0"
+checksum = "2a26dbd934e5451d21ef060c018dae56fc073894c5a7896f882928a76e6d081b"
 dependencies = [
  "proc-macro2",
  "quote",
@@ -1245,17 +1254,17 @@ checksum = "589f6da84c646204747d1270a2a5661ea66ed1cced2631d546fdfb155959f9ec"
 
 [[package]]
 name = "winnow"
-version = "0.7.4"
+version = "0.7.13"
 source = "registry+https://github.com/rust-lang/crates.io-index"
-checksum = "0e97b544156e9bebe1a0ffbc03484fc1ffe3100cbce3ffb17eac35f7cdd7ab36"
+checksum = "21a0236b59786fed61e2a80582dd500fe61f18b5dca67a4a067d0bc9039339cf"
 dependencies = [
  "memchr",
 ]
 
 [[package]]
 name = "wireplumber"
-version = "0.1.0"
-source = "git+https://github.com/arcnmx/wireplumber.rs.git?rev=6e48383a85aecfca22dac3ffc589fb3f25404eda#6e48383a85aecfca22dac3ffc589fb3f25404eda"
+version = "0.2.0"
+source = "git+https://github.com/arcnmx/wireplumber.rs.git?branch=wp-0.5#f6f43324f231fe6f6508b417c20728ffa75eea80"
 dependencies = [
  "bitflags",
  "gio",
@@ -1270,8 +1279,8 @@ dependencies = [
 
 [[package]]
 name = "wireplumber-sys"
-version = "0.1.0"
-source = "git+https://github.com/arcnmx/wireplumber.rs.git?rev=6e48383a85aecfca22dac3ffc589fb3f25404eda#6e48383a85aecfca22dac3ffc589fb3f25404eda"
+version = "0.2.0"
+source = "git+https://github.com/arcnmx/wireplumber.rs.git?branch=wp-0.5#f6f43324f231fe6f6508b417c20728ffa75eea80"
 dependencies = [
  "gio-sys",
  "glib-sys",
diff --git a/Cargo.toml b/Cargo.toml
index 50085a1..f533101 100644
--- a/Cargo.toml
+++ b/Cargo.toml
@@ -19,9 +19,13 @@ pipewire = "0.8"
 formatx = "0.2.3"
 
 [dependencies.wireplumber]
+version = "0.2"
 git = "https://github.com/arcnmx/wireplumber.rs.git"
-rev = "6e48383a85aecfca22dac3ffc589fb3f25404eda"
-features = ["v0_4_16"]
+branch = "wp-0.5"
+features = ["v0_5"]
+
+#rev = "6e48383a85aecfca22dac3ffc589fb3f25404eda"
+#features = ["v0_4_16"]
 
 [dependencies.adw]
 package = "libadwaita"
diff --git a/README.md b/README.md
index a89101c..4942030 100644
--- a/README.md
+++ b/README.md
@@ -1,5 +1,35 @@
 # pwvucontrol
 
+## Announcement Regarding `wireplumber-rs` Dependency and the Road Ahead
+
+As many of you know, the `wireplumber-rs` library (a Rust wrapper around WirePlumber) is no longer maintained. It was a hobby project and never officially supported by the PipeWire project, which has made it a long-standing issue.
+
+Upgrading to GNOME Flatpak runtime version 49 also requires switching to the `org.freedesktop.Sdk.Extension.llvm20` SDK extension. Unfortunately, this breaks the build for WirePlumber 0.4.9 due to compiler errors. The only viable path is upgrading to WirePlumber 0.5.0, which is incompatible with `wireplumber-rs` 0.4. This effectively ends the road for `wireplumber-rs`.
+
+I’m not in a position to fork and maintain `wireplumber-rs` myself, as I lack the expertise in `gobject-introspection` and writing robust Rust bindings for WirePlumber.
+
+### Possible Paths Forward
+
+1. **Rewrite `pwvucontrol` to use `pipewire-rs` directly**
+
+   This means re-implementing the tracking of PipeWire objects and communication with the PipeWire server—functionality previously handled by WirePlumber. I can reuse some of Helvum’s code for this.
+
+2. **Switch to using PulseAudio APIs**
+
+   PulseAudio remains supported for backward compatibility and is considered a higher-level API by the PipeWire project. There are solid Rust wrappers available. I could still use PipeWire APIs where needed, but this would mean mixing two protocols e.g., reconciling a PulseAudio sink with a PipeWire node for direct API calls.
+   While `pwvucontrol` currently doesn't rely heavily on PipeWire-only features, future plans include support for session manager properties (e.g., `pw-metadata -n sm-settings`) and node properties (e.g., `pw-cli enum-params <sink id> PropInfo`), which would require the PipeWire API.
+
+3. **Rewrite it in another language**
+
+    I'm not going to do that.
+
+### Final Thoughts
+
+This project is, above all, a personal Rust learning exercise. Like most open source projects, development happens when I have both the time and interest. I'm not committed to maintaining it indefinitely, unless it gains more contributors and traction.
+
+That’s all for now.
+
+
 ## Flatpak
 
 
@@ -17,7 +47,7 @@ by using this command:
 
 ## General info
 
-This is an attempt at making a volume control applet for Pipewire.
+This is an attempt at making a volume control applet for PipeWire.
 
 Current implemented features as of 2024-05-04:
 
diff --git a/Release steps.txt b/Release steps.txt
new file mode 100644
index 0000000..733d38f
--- /dev/null
+++ b/Release steps.txt	
@@ -0,0 +1,12 @@
+Steps to making a new release
+
+1. Bump version in Cargo.toml and meson.build
+2. Add new release in appdata metainfo
+3. Create git tag
+4. Run meson dist -C builddir --no-tests
+5. Make new github release, upload tarballs from meson dist.
+6. Create new branch and commit for flathub project, setting new url and sha256sum.
+7. Do pull request on flathub project.
+8. Merge.
+
+
diff --git a/build-aux/com.saivert.pwvucontrol.json b/build-aux/com.saivert.pwvucontrol.json
index a16574f..087e264 100644
--- a/build-aux/com.saivert.pwvucontrol.json
+++ b/build-aux/com.saivert.pwvucontrol.json
@@ -1,11 +1,11 @@
 {
     "app-id": "com.saivert.pwvucontrol",
     "runtime": "org.gnome.Platform",
-    "runtime-version": "48",
+    "runtime-version": "49",
     "sdk": "org.gnome.Sdk",
     "sdk-extensions": [
         "org.freedesktop.Sdk.Extension.rust-stable",
-        "org.freedesktop.Sdk.Extension.llvm18"
+        "org.freedesktop.Sdk.Extension.llvm20"
     ],
     "command": "pwvucontrol",
     "finish-args": [
@@ -54,7 +54,7 @@
             "sources": [
                 {
                     "type": "git",
-                    "tag": "0.4.16",
+                    "tag": "0.5.12",
                     "url": "https://github.com/PipeWire/wireplumber.git"
                 }
             ]
diff --git a/meson.build b/meson.build
index ef18ba7..09c8119 100644
--- a/meson.build
+++ b/meson.build
@@ -14,7 +14,7 @@ dependency('gio-2.0', version: '>= 2.66')
 dependency('gtk4', version: '>= 4.0.0')
 dependency('libadwaita-1', version: '>= 1.2')
 dependency('libpipewire-0.3', version: '>= 0.3.83')
-dependency('wireplumber-0.4', version: '>= 0.4.15')
+dependency('wireplumber-0.5', version: '>= 0.5.11')
 
 find_program('glib-compile-resources', required: true)
 glib_compile_schemas = find_program('glib-compile-schemas', required: true)
diff --git a/src/backend/manager.rs b/src/backend/manager.rs
index 2c90239..545388c 100644
--- a/src/backend/manager.rs
+++ b/src/backend/manager.rs
@@ -11,12 +11,16 @@ use gtk::{
 use std::cell::{OnceCell, RefCell};
 use wireplumber as wp;
 use wp::{
-    plugin::{PluginFeatures, *},
+    plugin::*,
     pw::{MetadataExt, PipewireObjectExt2, ProxyExt},
     registry::{Constraint, ConstraintType, Interest, ObjectManager},
 };
 
 mod imp {
+    use std::cell::Cell;
+
+    use wireplumber::core::ObjectExt2;
+
     use super::*;
 
     #[derive(Properties)]
@@ -56,6 +60,8 @@ mod imp {
 
         #[property(get, set, construct_only)]
         application: RefCell<Option<PwvucontrolApplication>>,
+
+        pub plugin_count: Cell<u32>,
     }
 
     impl Default for PwvucontrolManager {
@@ -75,6 +81,7 @@ mod imp {
                 default_nodes_api: Default::default(),
                 mixer_api: Default::default(),
                 application: Default::default(),
+                plugin_count: Default::default(),
             }
         }
     }
@@ -99,20 +106,15 @@ mod imp {
         fn setup_wp_connection(&self) {
             wp::core::Core::init_with_flags(wp::InitFlags::ALL);
 
-            if !wp::Log::level_is_enabled(glib::LogLevelFlags::LEVEL_WARNING) {
-                wp::Log::set_default_level("1");
-            }
+            wp::Log::set_default_level("3");
 
             let props = wp::pw::Properties::new_string("media.category=Manager");
 
-            let wp_core = wp::core::Core::new(Some(&glib::MainContext::default()), Some(props));
+            let wp_core = wp::core::Core::new(Some(&glib::MainContext::default()), None, Some(props));
             let wp_om = ObjectManager::new();
 
             wp_core.connect();
 
-            wp_core.load_component("libwireplumber-module-mixer-api", "module", None).expect("loadig mixer-api plugin");
-            wp_core.load_component("libwireplumber-module-default-nodes-api", "module", None).expect("loadig mixer-api plugin");
-
             wp_om.add_interest({
                 let interest: Interest<wp::pw::Node> = wp::registry::Interest::new();
                 let variant = glib::Variant::tuple_from_iter(
@@ -197,11 +199,20 @@ mod imp {
             }));
 
             glib::MainContext::default().spawn_local(clone!(@weak self as manager, @weak wp_core as core, @weak wp_om as om => async move {
-                let plugin_names = vec![("mixer-api", &manager.mixer_api), ("default-nodes-api", &manager.default_nodes_api)];
+                let plugins = [
+                    ("libwireplumber-module-mixer-api", "mixer-api", &manager.mixer_api),
+                    ("libwireplumber-module-default-nodes-api", "default-nodes-api", &manager.default_nodes_api)
+                ];
 
                 let mut count = 0;
-                for (plugin_name, plugin_cell) in plugin_names.iter() {
+                for (component_name, plugin_name, plugin_cell) in plugins.iter() {
+                    if core.load_component_future(Some(std::borrow::Cow::Borrowed(component_name)), ComponentLoader::TYPE_WIREPLUMBER_MODULE, None, None).await.is_err() {
+                        pwvucontrol_critical!("Cannot load component {component_name}");
+                        PwvucontrolApplication::default().quit();
+                        return;
+                    }
                     if let Some(plugin) = Plugin::find(&core, plugin_name) {
+                        
                         let result = plugin.activate_future(PluginFeatures::ENABLED).await;
                         if result.is_err() {
                             pwvucontrol_critical!("Cannot activate plugin {plugin_name}");
@@ -209,7 +220,7 @@ mod imp {
                             plugin_cell.set(plugin).expect("Plugin not set");
                             pwvucontrol_info!("Activated plugin {plugin_name}");
                             count += 1;
-                            if count == plugin_names.len() {
+                            if count == plugins.len() {
                                 core.install_object_manager(&om);
                             }
                         }
@@ -265,10 +276,10 @@ mod imp {
             if let Some(metadataobj) = object.dynamic_cast_ref::<wp::pw::Metadata>() {
                 self.metadata.replace(Some(metadataobj.clone()));
 
-                for a in metadataobj.new_iterator(u32::MAX).expect("iterator") {
-                    let (s, k, t, v) = wp::pw::Metadata::iterator_item_extract(&a);
-                    self.metadata_changed(s, Some(&k), Some(&t), Some(&v));
-                }
+                // TODO: Fix when bindings for WpMetadataitem are available.
+                // for a in metadataobj.new_iterator(u32::MAX).expect("iterator") {
+                //     pwvucontrol_info!("Metadata item: {:?}", a);
+                // }
 
                 metadataobj.connect_changed(clone!(@weak self as manager => move |_,s,k,t,v| manager.metadata_changed(s, k, t, v)));
             } else {
diff --git a/src/macros.rs b/src/macros.rs
index d491332..590d2ae 100644
--- a/src/macros.rs
+++ b/src/macros.rs
@@ -1,7 +1,7 @@
 #[macro_export]
 macro_rules! pwvucontrol_info {
     ($format:literal $($args:tt)*) => {
-        wireplumber::log::info! { domain: "pwvucontrol", $format $($args)* }
+        wireplumber::log::info! { domain: crate::TOPIC, $format $($args)* }
     };
 }
 pub use pwvucontrol_info;
@@ -9,7 +9,7 @@ pub use pwvucontrol_info;
 #[macro_export]
 macro_rules! pwvucontrol_debug {
     ($format:literal $($args:tt)*) => {
-        wireplumber::log::debug! { domain: "pwvucontrol", $format $($args)* }
+        wireplumber::log::debug! { domain: crate::TOPIC, $format $($args)* }
     };
 }
 pub use pwvucontrol_debug;
@@ -17,7 +17,7 @@ pub use pwvucontrol_debug;
 #[macro_export]
 macro_rules! pwvucontrol_warning {
     ($format:literal $($args:tt)*) => {
-        wireplumber::log::warning! { domain: "pwvucontrol", $format $($args)* }
+        wireplumber::log::warning! { domain: crate::TOPIC, $format $($args)* }
     };
 }
 pub use pwvucontrol_warning;
@@ -25,7 +25,7 @@ pub use pwvucontrol_warning;
 #[macro_export]
 macro_rules! pwvucontrol_critical {
     ($format:literal $($args:tt)*) => {
-        wireplumber::log::critical! { domain: "pwvucontrol", $format $($args)* }
+        wireplumber::log::critical! { domain: crate::TOPIC, $format $($args)* }
     };
 }
 pub use pwvucontrol_critical;
diff --git a/src/main.rs b/src/main.rs
index 32d3247..64c4c01 100644
--- a/src/main.rs
+++ b/src/main.rs
@@ -25,6 +25,10 @@ mod config {
 }
 mod macros;
 
+log_topic! {
+   static TOPIC = "pwvucontrol";
+}
+
 mod application;
 mod backend;
 mod ui;
@@ -39,6 +43,7 @@ use self::application::PwvucontrolApplication;
 use self::config::{GETTEXT_PACKAGE, LOCALEDIR, RESOURCES_FILE};
 use gettextrs::{bind_textdomain_codeset, bindtextdomain, gettext, textdomain};
 use gtk::gio;
+use wireplumber::log_topic;
 
 fn path_override_from_env<K>(var: K, default: K, append: Option<K>) -> OsString
 where
