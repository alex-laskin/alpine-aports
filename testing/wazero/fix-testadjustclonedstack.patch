Patch-Source: https://github.com/tetratelabs/wazero/pull/2418
---
From a83b10f199a26569e74187c896f57f4530479008 Mon Sep 17 00:00:00 2001
From: Nuno Cruces <ncruces@users.noreply.github.com>
Date: Tue, 12 Aug 2025 11:41:47 +0100
Subject: [PATCH] fix: TestAdjustClonedStack

Signed-off-by: Nuno Cruces <ncruces@users.noreply.github.com>
---
 .../engine/wazevo/backend/isa/amd64/stack_test.go  | 14 ++++++++------
 1 file changed, 8 insertions(+), 6 deletions(-)

diff --git a/internal/engine/wazevo/backend/isa/amd64/stack_test.go b/internal/engine/wazevo/backend/isa/amd64/stack_test.go
index c4ed995d83..a6692f17f6 100644
--- a/internal/engine/wazevo/backend/isa/amd64/stack_test.go
+++ b/internal/engine/wazevo/backend/isa/amd64/stack_test.go
@@ -43,12 +43,14 @@ func addressOf(v *byte) uint64 {
 	return uint64(uintptr(unsafe.Pointer(v)))
 }
 
-func TestAdjustClonedStack(t *testing.T) {
-	// In order to allocate slices on Go heap, we need to allocSlice function.
-	allocSlice := func(size int) []byte {
-		return make([]byte, size)
-	}
+// In order to allocate slices on Go heap, we need allocSlice function.
+//
+//go:noinline
+func allocSlice(size int) []byte {
+	return make([]byte, size)
+}
 
+func TestAdjustClonedStack(t *testing.T) {
 	oldStack := allocSlice(512)
 	oldRsp := uintptr(unsafe.Pointer(&oldStack[0]))
 	oldTop := uintptr(unsafe.Pointer(&oldStack[len(oldStack)-1]))
@@ -60,7 +62,7 @@ func TestAdjustClonedStack(t *testing.T) {
 	newStack := allocSlice(1024)
 	rsp := uintptr(unsafe.Pointer(&newStack[0]))
 	rbp := rsp + rbpIndex
-	// Coy old stack to new stack which contains the old pointers to the old stack elements.
+	// Copy old stack to new stack which contains the old pointers to the old stack elements.
 	copy(newStack, oldStack)
 
 	AdjustClonedStack(oldRsp, oldTop, rsp, rbp, uintptr(addressOf(&newStack[len(newStack)-1])))
